
LP_GPS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d00  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08002dc0  08002dc0  00012dc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e2c  08002e2c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002e2c  08002e2c  00012e2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002e34  08002e34  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e34  08002e34  00012e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e38  08002e38  00012e38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002e3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  2000000c  08002e48  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000164  08002e48  00020164  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009357  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e74  00000000  00000000  0002938b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000918  00000000  00000000  0002b200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000830  00000000  00000000  0002bb18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010ee1  00000000  00000000  0002c348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b6aa  00000000  00000000  0003d229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006439d  00000000  00000000  000488d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000acc70  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001e9c  00000000  00000000  000accc4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002da8 	.word	0x08002da8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002da8 	.word	0x08002da8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	1c08      	adds	r0, r1, #0
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f82e 	bl	80002b0 <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	0415      	lsls	r5, r2, #16
 8000264:	0c2d      	lsrs	r5, r5, #16
 8000266:	000f      	movs	r7, r1
 8000268:	0001      	movs	r1, r0
 800026a:	002e      	movs	r6, r5
 800026c:	46c6      	mov	lr, r8
 800026e:	4684      	mov	ip, r0
 8000270:	0400      	lsls	r0, r0, #16
 8000272:	0c14      	lsrs	r4, r2, #16
 8000274:	0c00      	lsrs	r0, r0, #16
 8000276:	0c09      	lsrs	r1, r1, #16
 8000278:	4346      	muls	r6, r0
 800027a:	434d      	muls	r5, r1
 800027c:	4360      	muls	r0, r4
 800027e:	4361      	muls	r1, r4
 8000280:	1940      	adds	r0, r0, r5
 8000282:	0c34      	lsrs	r4, r6, #16
 8000284:	1824      	adds	r4, r4, r0
 8000286:	b500      	push	{lr}
 8000288:	42a5      	cmp	r5, r4
 800028a:	d903      	bls.n	8000294 <__aeabi_lmul+0x34>
 800028c:	2080      	movs	r0, #128	; 0x80
 800028e:	0240      	lsls	r0, r0, #9
 8000290:	4680      	mov	r8, r0
 8000292:	4441      	add	r1, r8
 8000294:	0c25      	lsrs	r5, r4, #16
 8000296:	186d      	adds	r5, r5, r1
 8000298:	4661      	mov	r1, ip
 800029a:	4359      	muls	r1, r3
 800029c:	437a      	muls	r2, r7
 800029e:	0430      	lsls	r0, r6, #16
 80002a0:	1949      	adds	r1, r1, r5
 80002a2:	0424      	lsls	r4, r4, #16
 80002a4:	0c00      	lsrs	r0, r0, #16
 80002a6:	1820      	adds	r0, r4, r0
 80002a8:	1889      	adds	r1, r1, r2
 80002aa:	bc80      	pop	{r7}
 80002ac:	46b8      	mov	r8, r7
 80002ae:	bdf0      	pop	{r4, r5, r6, r7, pc}

080002b0 <__udivmoddi4>:
 80002b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002b2:	4657      	mov	r7, sl
 80002b4:	464e      	mov	r6, r9
 80002b6:	4645      	mov	r5, r8
 80002b8:	46de      	mov	lr, fp
 80002ba:	b5e0      	push	{r5, r6, r7, lr}
 80002bc:	0004      	movs	r4, r0
 80002be:	000d      	movs	r5, r1
 80002c0:	4692      	mov	sl, r2
 80002c2:	4699      	mov	r9, r3
 80002c4:	b083      	sub	sp, #12
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d830      	bhi.n	800032c <__udivmoddi4+0x7c>
 80002ca:	d02d      	beq.n	8000328 <__udivmoddi4+0x78>
 80002cc:	4649      	mov	r1, r9
 80002ce:	4650      	mov	r0, sl
 80002d0:	f000 f8ba 	bl	8000448 <__clzdi2>
 80002d4:	0029      	movs	r1, r5
 80002d6:	0006      	movs	r6, r0
 80002d8:	0020      	movs	r0, r4
 80002da:	f000 f8b5 	bl	8000448 <__clzdi2>
 80002de:	1a33      	subs	r3, r6, r0
 80002e0:	4698      	mov	r8, r3
 80002e2:	3b20      	subs	r3, #32
 80002e4:	469b      	mov	fp, r3
 80002e6:	d433      	bmi.n	8000350 <__udivmoddi4+0xa0>
 80002e8:	465a      	mov	r2, fp
 80002ea:	4653      	mov	r3, sl
 80002ec:	4093      	lsls	r3, r2
 80002ee:	4642      	mov	r2, r8
 80002f0:	001f      	movs	r7, r3
 80002f2:	4653      	mov	r3, sl
 80002f4:	4093      	lsls	r3, r2
 80002f6:	001e      	movs	r6, r3
 80002f8:	42af      	cmp	r7, r5
 80002fa:	d83a      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80002fc:	42af      	cmp	r7, r5
 80002fe:	d100      	bne.n	8000302 <__udivmoddi4+0x52>
 8000300:	e078      	b.n	80003f4 <__udivmoddi4+0x144>
 8000302:	465b      	mov	r3, fp
 8000304:	1ba4      	subs	r4, r4, r6
 8000306:	41bd      	sbcs	r5, r7
 8000308:	2b00      	cmp	r3, #0
 800030a:	da00      	bge.n	800030e <__udivmoddi4+0x5e>
 800030c:	e075      	b.n	80003fa <__udivmoddi4+0x14a>
 800030e:	2200      	movs	r2, #0
 8000310:	2300      	movs	r3, #0
 8000312:	9200      	str	r2, [sp, #0]
 8000314:	9301      	str	r3, [sp, #4]
 8000316:	2301      	movs	r3, #1
 8000318:	465a      	mov	r2, fp
 800031a:	4093      	lsls	r3, r2
 800031c:	9301      	str	r3, [sp, #4]
 800031e:	2301      	movs	r3, #1
 8000320:	4642      	mov	r2, r8
 8000322:	4093      	lsls	r3, r2
 8000324:	9300      	str	r3, [sp, #0]
 8000326:	e028      	b.n	800037a <__udivmoddi4+0xca>
 8000328:	4282      	cmp	r2, r0
 800032a:	d9cf      	bls.n	80002cc <__udivmoddi4+0x1c>
 800032c:	2200      	movs	r2, #0
 800032e:	2300      	movs	r3, #0
 8000330:	9200      	str	r2, [sp, #0]
 8000332:	9301      	str	r3, [sp, #4]
 8000334:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000336:	2b00      	cmp	r3, #0
 8000338:	d001      	beq.n	800033e <__udivmoddi4+0x8e>
 800033a:	601c      	str	r4, [r3, #0]
 800033c:	605d      	str	r5, [r3, #4]
 800033e:	9800      	ldr	r0, [sp, #0]
 8000340:	9901      	ldr	r1, [sp, #4]
 8000342:	b003      	add	sp, #12
 8000344:	bcf0      	pop	{r4, r5, r6, r7}
 8000346:	46bb      	mov	fp, r7
 8000348:	46b2      	mov	sl, r6
 800034a:	46a9      	mov	r9, r5
 800034c:	46a0      	mov	r8, r4
 800034e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000350:	4642      	mov	r2, r8
 8000352:	2320      	movs	r3, #32
 8000354:	1a9b      	subs	r3, r3, r2
 8000356:	4652      	mov	r2, sl
 8000358:	40da      	lsrs	r2, r3
 800035a:	4641      	mov	r1, r8
 800035c:	0013      	movs	r3, r2
 800035e:	464a      	mov	r2, r9
 8000360:	408a      	lsls	r2, r1
 8000362:	0017      	movs	r7, r2
 8000364:	4642      	mov	r2, r8
 8000366:	431f      	orrs	r7, r3
 8000368:	4653      	mov	r3, sl
 800036a:	4093      	lsls	r3, r2
 800036c:	001e      	movs	r6, r3
 800036e:	42af      	cmp	r7, r5
 8000370:	d9c4      	bls.n	80002fc <__udivmoddi4+0x4c>
 8000372:	2200      	movs	r2, #0
 8000374:	2300      	movs	r3, #0
 8000376:	9200      	str	r2, [sp, #0]
 8000378:	9301      	str	r3, [sp, #4]
 800037a:	4643      	mov	r3, r8
 800037c:	2b00      	cmp	r3, #0
 800037e:	d0d9      	beq.n	8000334 <__udivmoddi4+0x84>
 8000380:	07fb      	lsls	r3, r7, #31
 8000382:	0872      	lsrs	r2, r6, #1
 8000384:	431a      	orrs	r2, r3
 8000386:	4646      	mov	r6, r8
 8000388:	087b      	lsrs	r3, r7, #1
 800038a:	e00e      	b.n	80003aa <__udivmoddi4+0xfa>
 800038c:	42ab      	cmp	r3, r5
 800038e:	d101      	bne.n	8000394 <__udivmoddi4+0xe4>
 8000390:	42a2      	cmp	r2, r4
 8000392:	d80c      	bhi.n	80003ae <__udivmoddi4+0xfe>
 8000394:	1aa4      	subs	r4, r4, r2
 8000396:	419d      	sbcs	r5, r3
 8000398:	2001      	movs	r0, #1
 800039a:	1924      	adds	r4, r4, r4
 800039c:	416d      	adcs	r5, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	3e01      	subs	r6, #1
 80003a2:	1824      	adds	r4, r4, r0
 80003a4:	414d      	adcs	r5, r1
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d006      	beq.n	80003b8 <__udivmoddi4+0x108>
 80003aa:	42ab      	cmp	r3, r5
 80003ac:	d9ee      	bls.n	800038c <__udivmoddi4+0xdc>
 80003ae:	3e01      	subs	r6, #1
 80003b0:	1924      	adds	r4, r4, r4
 80003b2:	416d      	adcs	r5, r5
 80003b4:	2e00      	cmp	r6, #0
 80003b6:	d1f8      	bne.n	80003aa <__udivmoddi4+0xfa>
 80003b8:	9800      	ldr	r0, [sp, #0]
 80003ba:	9901      	ldr	r1, [sp, #4]
 80003bc:	465b      	mov	r3, fp
 80003be:	1900      	adds	r0, r0, r4
 80003c0:	4169      	adcs	r1, r5
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	db24      	blt.n	8000410 <__udivmoddi4+0x160>
 80003c6:	002b      	movs	r3, r5
 80003c8:	465a      	mov	r2, fp
 80003ca:	4644      	mov	r4, r8
 80003cc:	40d3      	lsrs	r3, r2
 80003ce:	002a      	movs	r2, r5
 80003d0:	40e2      	lsrs	r2, r4
 80003d2:	001c      	movs	r4, r3
 80003d4:	465b      	mov	r3, fp
 80003d6:	0015      	movs	r5, r2
 80003d8:	2b00      	cmp	r3, #0
 80003da:	db2a      	blt.n	8000432 <__udivmoddi4+0x182>
 80003dc:	0026      	movs	r6, r4
 80003de:	409e      	lsls	r6, r3
 80003e0:	0033      	movs	r3, r6
 80003e2:	0026      	movs	r6, r4
 80003e4:	4647      	mov	r7, r8
 80003e6:	40be      	lsls	r6, r7
 80003e8:	0032      	movs	r2, r6
 80003ea:	1a80      	subs	r0, r0, r2
 80003ec:	4199      	sbcs	r1, r3
 80003ee:	9000      	str	r0, [sp, #0]
 80003f0:	9101      	str	r1, [sp, #4]
 80003f2:	e79f      	b.n	8000334 <__udivmoddi4+0x84>
 80003f4:	42a3      	cmp	r3, r4
 80003f6:	d8bc      	bhi.n	8000372 <__udivmoddi4+0xc2>
 80003f8:	e783      	b.n	8000302 <__udivmoddi4+0x52>
 80003fa:	4642      	mov	r2, r8
 80003fc:	2320      	movs	r3, #32
 80003fe:	2100      	movs	r1, #0
 8000400:	1a9b      	subs	r3, r3, r2
 8000402:	2200      	movs	r2, #0
 8000404:	9100      	str	r1, [sp, #0]
 8000406:	9201      	str	r2, [sp, #4]
 8000408:	2201      	movs	r2, #1
 800040a:	40da      	lsrs	r2, r3
 800040c:	9201      	str	r2, [sp, #4]
 800040e:	e786      	b.n	800031e <__udivmoddi4+0x6e>
 8000410:	4642      	mov	r2, r8
 8000412:	2320      	movs	r3, #32
 8000414:	1a9b      	subs	r3, r3, r2
 8000416:	002a      	movs	r2, r5
 8000418:	4646      	mov	r6, r8
 800041a:	409a      	lsls	r2, r3
 800041c:	0023      	movs	r3, r4
 800041e:	40f3      	lsrs	r3, r6
 8000420:	4644      	mov	r4, r8
 8000422:	4313      	orrs	r3, r2
 8000424:	002a      	movs	r2, r5
 8000426:	40e2      	lsrs	r2, r4
 8000428:	001c      	movs	r4, r3
 800042a:	465b      	mov	r3, fp
 800042c:	0015      	movs	r5, r2
 800042e:	2b00      	cmp	r3, #0
 8000430:	dad4      	bge.n	80003dc <__udivmoddi4+0x12c>
 8000432:	4642      	mov	r2, r8
 8000434:	002f      	movs	r7, r5
 8000436:	2320      	movs	r3, #32
 8000438:	0026      	movs	r6, r4
 800043a:	4097      	lsls	r7, r2
 800043c:	1a9b      	subs	r3, r3, r2
 800043e:	40de      	lsrs	r6, r3
 8000440:	003b      	movs	r3, r7
 8000442:	4333      	orrs	r3, r6
 8000444:	e7cd      	b.n	80003e2 <__udivmoddi4+0x132>
 8000446:	46c0      	nop			; (mov r8, r8)

08000448 <__clzdi2>:
 8000448:	b510      	push	{r4, lr}
 800044a:	2900      	cmp	r1, #0
 800044c:	d103      	bne.n	8000456 <__clzdi2+0xe>
 800044e:	f000 f807 	bl	8000460 <__clzsi2>
 8000452:	3020      	adds	r0, #32
 8000454:	e002      	b.n	800045c <__clzdi2+0x14>
 8000456:	1c08      	adds	r0, r1, #0
 8000458:	f000 f802 	bl	8000460 <__clzsi2>
 800045c:	bd10      	pop	{r4, pc}
 800045e:	46c0      	nop			; (mov r8, r8)

08000460 <__clzsi2>:
 8000460:	211c      	movs	r1, #28
 8000462:	2301      	movs	r3, #1
 8000464:	041b      	lsls	r3, r3, #16
 8000466:	4298      	cmp	r0, r3
 8000468:	d301      	bcc.n	800046e <__clzsi2+0xe>
 800046a:	0c00      	lsrs	r0, r0, #16
 800046c:	3910      	subs	r1, #16
 800046e:	0a1b      	lsrs	r3, r3, #8
 8000470:	4298      	cmp	r0, r3
 8000472:	d301      	bcc.n	8000478 <__clzsi2+0x18>
 8000474:	0a00      	lsrs	r0, r0, #8
 8000476:	3908      	subs	r1, #8
 8000478:	091b      	lsrs	r3, r3, #4
 800047a:	4298      	cmp	r0, r3
 800047c:	d301      	bcc.n	8000482 <__clzsi2+0x22>
 800047e:	0900      	lsrs	r0, r0, #4
 8000480:	3904      	subs	r1, #4
 8000482:	a202      	add	r2, pc, #8	; (adr r2, 800048c <__clzsi2+0x2c>)
 8000484:	5c10      	ldrb	r0, [r2, r0]
 8000486:	1840      	adds	r0, r0, r1
 8000488:	4770      	bx	lr
 800048a:	46c0      	nop			; (mov r8, r8)
 800048c:	02020304 	.word	0x02020304
 8000490:	01010101 	.word	0x01010101
	...

0800049c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a2:	4b08      	ldr	r3, [pc, #32]	; (80004c4 <MX_GPIO_Init+0x28>)
 80004a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80004a6:	4b07      	ldr	r3, [pc, #28]	; (80004c4 <MX_GPIO_Init+0x28>)
 80004a8:	2101      	movs	r1, #1
 80004aa:	430a      	orrs	r2, r1
 80004ac:	62da      	str	r2, [r3, #44]	; 0x2c
 80004ae:	4b05      	ldr	r3, [pc, #20]	; (80004c4 <MX_GPIO_Init+0x28>)
 80004b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80004b2:	2201      	movs	r2, #1
 80004b4:	4013      	ands	r3, r2
 80004b6:	607b      	str	r3, [r7, #4]
 80004b8:	687b      	ldr	r3, [r7, #4]

}
 80004ba:	46c0      	nop			; (mov r8, r8)
 80004bc:	46bd      	mov	sp, r7
 80004be:	b002      	add	sp, #8
 80004c0:	bd80      	pop	{r7, pc}
 80004c2:	46c0      	nop			; (mov r8, r8)
 80004c4:	40021000 	.word	0x40021000

080004c8 <MX_LPTIM1_Init>:

LPTIM_HandleTypeDef hlptim1;

/* LPTIM1 init function */
void MX_LPTIM1_Init(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 80004cc:	4b0f      	ldr	r3, [pc, #60]	; (800050c <MX_LPTIM1_Init+0x44>)
 80004ce:	4a10      	ldr	r2, [pc, #64]	; (8000510 <MX_LPTIM1_Init+0x48>)
 80004d0:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 80004d2:	4b0e      	ldr	r3, [pc, #56]	; (800050c <MX_LPTIM1_Init+0x44>)
 80004d4:	2200      	movs	r2, #0
 80004d6:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 80004d8:	4b0c      	ldr	r3, [pc, #48]	; (800050c <MX_LPTIM1_Init+0x44>)
 80004da:	2200      	movs	r2, #0
 80004dc:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 80004de:	4b0b      	ldr	r3, [pc, #44]	; (800050c <MX_LPTIM1_Init+0x44>)
 80004e0:	4a0c      	ldr	r2, [pc, #48]	; (8000514 <MX_LPTIM1_Init+0x4c>)
 80004e2:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 80004e4:	4b09      	ldr	r3, [pc, #36]	; (800050c <MX_LPTIM1_Init+0x44>)
 80004e6:	2200      	movs	r2, #0
 80004e8:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 80004ea:	4b08      	ldr	r3, [pc, #32]	; (800050c <MX_LPTIM1_Init+0x44>)
 80004ec:	2200      	movs	r2, #0
 80004ee:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 80004f0:	4b06      	ldr	r3, [pc, #24]	; (800050c <MX_LPTIM1_Init+0x44>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 80004f6:	4b05      	ldr	r3, [pc, #20]	; (800050c <MX_LPTIM1_Init+0x44>)
 80004f8:	0018      	movs	r0, r3
 80004fa:	f000 fd4d 	bl	8000f98 <HAL_LPTIM_Init>
 80004fe:	1e03      	subs	r3, r0, #0
 8000500:	d001      	beq.n	8000506 <MX_LPTIM1_Init+0x3e>
  {
    Error_Handler();
 8000502:	f000 f8f5 	bl	80006f0 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8000506:	46c0      	nop			; (mov r8, r8)
 8000508:	46bd      	mov	sp, r7
 800050a:	bd80      	pop	{r7, pc}
 800050c:	20000028 	.word	0x20000028
 8000510:	40007c00 	.word	0x40007c00
 8000514:	0000ffff 	.word	0x0000ffff

08000518 <HAL_LPTIM_MspInit>:

void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* lptimHandle)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]

  if(lptimHandle->Instance==LPTIM1)
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a0a      	ldr	r2, [pc, #40]	; (8000550 <HAL_LPTIM_MspInit+0x38>)
 8000526:	4293      	cmp	r3, r2
 8000528:	d10e      	bne.n	8000548 <HAL_LPTIM_MspInit+0x30>
  {
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
    /* LPTIM1 clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 800052a:	4b0a      	ldr	r3, [pc, #40]	; (8000554 <HAL_LPTIM_MspInit+0x3c>)
 800052c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800052e:	4b09      	ldr	r3, [pc, #36]	; (8000554 <HAL_LPTIM_MspInit+0x3c>)
 8000530:	2180      	movs	r1, #128	; 0x80
 8000532:	0609      	lsls	r1, r1, #24
 8000534:	430a      	orrs	r2, r1
 8000536:	639a      	str	r2, [r3, #56]	; 0x38

    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8000538:	2200      	movs	r2, #0
 800053a:	2100      	movs	r1, #0
 800053c:	200d      	movs	r0, #13
 800053e:	f000 fb03 	bl	8000b48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 8000542:	200d      	movs	r0, #13
 8000544:	f000 fb15 	bl	8000b72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }
}
 8000548:	46c0      	nop			; (mov r8, r8)
 800054a:	46bd      	mov	sp, r7
 800054c:	b002      	add	sp, #8
 800054e:	bd80      	pop	{r7, pc}
 8000550:	40007c00 	.word	0x40007c00
 8000554:	40021000 	.word	0x40021000

08000558 <main>:
#include "sysclk.h"



int main(void)
{
 8000558:	b580      	push	{r7, lr}
 800055a:	b082      	sub	sp, #8
 800055c:	af00      	add	r7, sp, #0

  HAL_Init();
 800055e:	f000 f9d7 	bl	8000910 <HAL_Init>

  SystemClock_Config();
 8000562:	f000 f853 	bl	800060c <SystemClock_Config>


  MX_GPIO_Init();
 8000566:	f7ff ff99 	bl	800049c <MX_GPIO_Init>
  MX_LPTIM1_Init();
 800056a:	f7ff ffad 	bl	80004c8 <MX_LPTIM1_Init>
  MX_LPUART1_UART_Init();
 800056e:	f000 f8c9 	bl	8000704 <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 8000572:	f000 f8f5 	bl	8000760 <MX_USART2_UART_Init>

  int i=0;
 8000576:	2300      	movs	r3, #0
 8000578:	607b      	str	r3, [r7, #4]

  while (1)
  {

	  i++;
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	3301      	adds	r3, #1
 800057e:	607b      	str	r3, [r7, #4]
 8000580:	e7fb      	b.n	800057a <main+0x22>
	...

08000584 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000588:	4b07      	ldr	r3, [pc, #28]	; (80005a8 <HAL_MspInit+0x24>)
 800058a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800058c:	4b06      	ldr	r3, [pc, #24]	; (80005a8 <HAL_MspInit+0x24>)
 800058e:	2101      	movs	r1, #1
 8000590:	430a      	orrs	r2, r1
 8000592:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000594:	4b04      	ldr	r3, [pc, #16]	; (80005a8 <HAL_MspInit+0x24>)
 8000596:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000598:	4b03      	ldr	r3, [pc, #12]	; (80005a8 <HAL_MspInit+0x24>)
 800059a:	2180      	movs	r1, #128	; 0x80
 800059c:	0549      	lsls	r1, r1, #21
 800059e:	430a      	orrs	r2, r1
 80005a0:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005a2:	46c0      	nop			; (mov r8, r8)
 80005a4:	46bd      	mov	sp, r7
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	40021000 	.word	0x40021000

080005ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80005b0:	e7fe      	b.n	80005b0 <NMI_Handler+0x4>

080005b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80005b2:	b580      	push	{r7, lr}
 80005b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80005b6:	e7fe      	b.n	80005b6 <HardFault_Handler+0x4>

080005b8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80005bc:	46c0      	nop			; (mov r8, r8)
 80005be:	46bd      	mov	sp, r7
 80005c0:	bd80      	pop	{r7, pc}

080005c2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005c2:	b580      	push	{r7, lr}
 80005c4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005c6:	46c0      	nop			; (mov r8, r8)
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}

080005cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005d0:	f000 f9f2 	bl	80009b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005d4:	46c0      	nop			; (mov r8, r8)
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bd80      	pop	{r7, pc}
	...

080005dc <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt / LPTIM1 wake-up interrupt through EXTI line 29.
  */
void LPTIM1_IRQHandler(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */

  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 80005e0:	4b03      	ldr	r3, [pc, #12]	; (80005f0 <LPTIM1_IRQHandler+0x14>)
 80005e2:	0018      	movs	r0, r3
 80005e4:	f000 fd5a 	bl	800109c <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */

  /* USER CODE END LPTIM1_IRQn 1 */
}
 80005e8:	46c0      	nop			; (mov r8, r8)
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	46c0      	nop			; (mov r8, r8)
 80005f0:	20000028 	.word	0x20000028

080005f4 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt / LPUART1 wake-up interrupt through EXTI line 28.
  */
void LPUART1_IRQHandler(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80005f8:	4b03      	ldr	r3, [pc, #12]	; (8000608 <LPUART1_IRQHandler+0x14>)
 80005fa:	0018      	movs	r0, r3
 80005fc:	f001 fd42 	bl	8002084 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8000600:	46c0      	nop			; (mov r8, r8)
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	46c0      	nop			; (mov r8, r8)
 8000608:	20000058 	.word	0x20000058

0800060c <SystemClock_Config>:
#include "sysclk.h"


void SystemClock_Config(void)
{
 800060c:	b590      	push	{r4, r7, lr}
 800060e:	b099      	sub	sp, #100	; 0x64
 8000610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000612:	242c      	movs	r4, #44	; 0x2c
 8000614:	193b      	adds	r3, r7, r4
 8000616:	0018      	movs	r0, r3
 8000618:	2334      	movs	r3, #52	; 0x34
 800061a:	001a      	movs	r2, r3
 800061c:	2100      	movs	r1, #0
 800061e:	f002 fbbb 	bl	8002d98 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000622:	2318      	movs	r3, #24
 8000624:	18fb      	adds	r3, r7, r3
 8000626:	0018      	movs	r0, r3
 8000628:	2314      	movs	r3, #20
 800062a:	001a      	movs	r2, r3
 800062c:	2100      	movs	r1, #0
 800062e:	f002 fbb3 	bl	8002d98 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000632:	003b      	movs	r3, r7
 8000634:	0018      	movs	r0, r3
 8000636:	2318      	movs	r3, #24
 8000638:	001a      	movs	r2, r3
 800063a:	2100      	movs	r1, #0
 800063c:	f002 fbac 	bl	8002d98 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000640:	4b29      	ldr	r3, [pc, #164]	; (80006e8 <SystemClock_Config+0xdc>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a29      	ldr	r2, [pc, #164]	; (80006ec <SystemClock_Config+0xe0>)
 8000646:	401a      	ands	r2, r3
 8000648:	4b27      	ldr	r3, [pc, #156]	; (80006e8 <SystemClock_Config+0xdc>)
 800064a:	2180      	movs	r1, #128	; 0x80
 800064c:	0109      	lsls	r1, r1, #4
 800064e:	430a      	orrs	r2, r1
 8000650:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000652:	0021      	movs	r1, r4
 8000654:	187b      	adds	r3, r7, r1
 8000656:	2210      	movs	r2, #16
 8000658:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800065a:	187b      	adds	r3, r7, r1
 800065c:	2201      	movs	r2, #1
 800065e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000660:	187b      	adds	r3, r7, r1
 8000662:	2200      	movs	r2, #0
 8000664:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 8000666:	187b      	adds	r3, r7, r1
 8000668:	22a0      	movs	r2, #160	; 0xa0
 800066a:	0212      	lsls	r2, r2, #8
 800066c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800066e:	187b      	adds	r3, r7, r1
 8000670:	2200      	movs	r2, #0
 8000672:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000674:	187b      	adds	r3, r7, r1
 8000676:	0018      	movs	r0, r3
 8000678:	f000 fdea 	bl	8001250 <HAL_RCC_OscConfig>
 800067c:	1e03      	subs	r3, r0, #0
 800067e:	d001      	beq.n	8000684 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000680:	f000 f836 	bl	80006f0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000684:	2118      	movs	r1, #24
 8000686:	187b      	adds	r3, r7, r1
 8000688:	220f      	movs	r2, #15
 800068a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 800068c:	187b      	adds	r3, r7, r1
 800068e:	2200      	movs	r2, #0
 8000690:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000692:	187b      	adds	r3, r7, r1
 8000694:	2200      	movs	r2, #0
 8000696:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000698:	187b      	adds	r3, r7, r1
 800069a:	2200      	movs	r2, #0
 800069c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800069e:	187b      	adds	r3, r7, r1
 80006a0:	2200      	movs	r2, #0
 80006a2:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006a4:	187b      	adds	r3, r7, r1
 80006a6:	2100      	movs	r1, #0
 80006a8:	0018      	movs	r0, r3
 80006aa:	f001 f94d 	bl	8001948 <HAL_RCC_ClockConfig>
 80006ae:	1e03      	subs	r3, r0, #0
 80006b0:	d001      	beq.n	80006b6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80006b2:	f000 f81d 	bl	80006f0 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_LPUART1
 80006b6:	003b      	movs	r3, r7
 80006b8:	2286      	movs	r2, #134	; 0x86
 80006ba:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_LPTIM1;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80006bc:	003b      	movs	r3, r7
 80006be:	2200      	movs	r2, #0
 80006c0:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80006c2:	003b      	movs	r3, r7
 80006c4:	2200      	movs	r2, #0
 80006c6:	60da      	str	r2, [r3, #12]
  PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 80006c8:	003b      	movs	r3, r7
 80006ca:	2200      	movs	r2, #0
 80006cc:	615a      	str	r2, [r3, #20]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006ce:	003b      	movs	r3, r7
 80006d0:	0018      	movs	r0, r3
 80006d2:	f001 fb5d 	bl	8001d90 <HAL_RCCEx_PeriphCLKConfig>
 80006d6:	1e03      	subs	r3, r0, #0
 80006d8:	d001      	beq.n	80006de <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80006da:	f000 f809 	bl	80006f0 <Error_Handler>
  }
}
 80006de:	46c0      	nop			; (mov r8, r8)
 80006e0:	46bd      	mov	sp, r7
 80006e2:	b019      	add	sp, #100	; 0x64
 80006e4:	bd90      	pop	{r4, r7, pc}
 80006e6:	46c0      	nop			; (mov r8, r8)
 80006e8:	40007000 	.word	0x40007000
 80006ec:	ffffe7ff 	.word	0xffffe7ff

080006f0 <Error_Handler>:


void Error_Handler(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f4:	b672      	cpsid	i
}
 80006f6:	46c0      	nop			; (mov r8, r8)
  __disable_irq();
  while (1)
 80006f8:	e7fe      	b.n	80006f8 <Error_Handler+0x8>

080006fa <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006fa:	b580      	push	{r7, lr}
 80006fc:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006fe:	46c0      	nop			; (mov r8, r8)
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}

08000704 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef huart2;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000708:	4b13      	ldr	r3, [pc, #76]	; (8000758 <MX_LPUART1_UART_Init+0x54>)
 800070a:	4a14      	ldr	r2, [pc, #80]	; (800075c <MX_LPUART1_UART_Init+0x58>)
 800070c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800070e:	4b12      	ldr	r3, [pc, #72]	; (8000758 <MX_LPUART1_UART_Init+0x54>)
 8000710:	22e1      	movs	r2, #225	; 0xe1
 8000712:	0252      	lsls	r2, r2, #9
 8000714:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000716:	4b10      	ldr	r3, [pc, #64]	; (8000758 <MX_LPUART1_UART_Init+0x54>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800071c:	4b0e      	ldr	r3, [pc, #56]	; (8000758 <MX_LPUART1_UART_Init+0x54>)
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8000722:	4b0d      	ldr	r3, [pc, #52]	; (8000758 <MX_LPUART1_UART_Init+0x54>)
 8000724:	2200      	movs	r2, #0
 8000726:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000728:	4b0b      	ldr	r3, [pc, #44]	; (8000758 <MX_LPUART1_UART_Init+0x54>)
 800072a:	220c      	movs	r2, #12
 800072c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072e:	4b0a      	ldr	r3, [pc, #40]	; (8000758 <MX_LPUART1_UART_Init+0x54>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000734:	4b08      	ldr	r3, [pc, #32]	; (8000758 <MX_LPUART1_UART_Init+0x54>)
 8000736:	2200      	movs	r2, #0
 8000738:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800073a:	4b07      	ldr	r3, [pc, #28]	; (8000758 <MX_LPUART1_UART_Init+0x54>)
 800073c:	2200      	movs	r2, #0
 800073e:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000740:	4b05      	ldr	r3, [pc, #20]	; (8000758 <MX_LPUART1_UART_Init+0x54>)
 8000742:	0018      	movs	r0, r3
 8000744:	f001 fc4a 	bl	8001fdc <HAL_UART_Init>
 8000748:	1e03      	subs	r3, r0, #0
 800074a:	d001      	beq.n	8000750 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 800074c:	f7ff ffd0 	bl	80006f0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000750:	46c0      	nop			; (mov r8, r8)
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	46c0      	nop			; (mov r8, r8)
 8000758:	20000058 	.word	0x20000058
 800075c:	40004800 	.word	0x40004800

08000760 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000764:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <MX_USART2_UART_Init+0x58>)
 8000766:	4a15      	ldr	r2, [pc, #84]	; (80007bc <MX_USART2_UART_Init+0x5c>)
 8000768:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800076a:	4b13      	ldr	r3, [pc, #76]	; (80007b8 <MX_USART2_UART_Init+0x58>)
 800076c:	22e1      	movs	r2, #225	; 0xe1
 800076e:	0252      	lsls	r2, r2, #9
 8000770:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000772:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <MX_USART2_UART_Init+0x58>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <MX_USART2_UART_Init+0x58>)
 800077a:	2200      	movs	r2, #0
 800077c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800077e:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <MX_USART2_UART_Init+0x58>)
 8000780:	2200      	movs	r2, #0
 8000782:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000784:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <MX_USART2_UART_Init+0x58>)
 8000786:	220c      	movs	r2, #12
 8000788:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800078a:	4b0b      	ldr	r3, [pc, #44]	; (80007b8 <MX_USART2_UART_Init+0x58>)
 800078c:	2200      	movs	r2, #0
 800078e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000790:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <MX_USART2_UART_Init+0x58>)
 8000792:	2200      	movs	r2, #0
 8000794:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000796:	4b08      	ldr	r3, [pc, #32]	; (80007b8 <MX_USART2_UART_Init+0x58>)
 8000798:	2200      	movs	r2, #0
 800079a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800079c:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <MX_USART2_UART_Init+0x58>)
 800079e:	2200      	movs	r2, #0
 80007a0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007a2:	4b05      	ldr	r3, [pc, #20]	; (80007b8 <MX_USART2_UART_Init+0x58>)
 80007a4:	0018      	movs	r0, r3
 80007a6:	f001 fc19 	bl	8001fdc <HAL_UART_Init>
 80007aa:	1e03      	subs	r3, r0, #0
 80007ac:	d001      	beq.n	80007b2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80007ae:	f7ff ff9f 	bl	80006f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007b2:	46c0      	nop			; (mov r8, r8)
 80007b4:	46bd      	mov	sp, r7
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	200000dc 	.word	0x200000dc
 80007bc:	40004400 	.word	0x40004400

080007c0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80007c0:	b590      	push	{r4, r7, lr}
 80007c2:	b08b      	sub	sp, #44	; 0x2c
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c8:	2414      	movs	r4, #20
 80007ca:	193b      	adds	r3, r7, r4
 80007cc:	0018      	movs	r0, r3
 80007ce:	2314      	movs	r3, #20
 80007d0:	001a      	movs	r2, r3
 80007d2:	2100      	movs	r1, #0
 80007d4:	f002 fae0 	bl	8002d98 <memset>
  if(uartHandle->Instance==LPUART1)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a34      	ldr	r2, [pc, #208]	; (80008b0 <HAL_UART_MspInit+0xf0>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d132      	bne.n	8000848 <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80007e2:	4b34      	ldr	r3, [pc, #208]	; (80008b4 <HAL_UART_MspInit+0xf4>)
 80007e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80007e6:	4b33      	ldr	r3, [pc, #204]	; (80008b4 <HAL_UART_MspInit+0xf4>)
 80007e8:	2180      	movs	r1, #128	; 0x80
 80007ea:	02c9      	lsls	r1, r1, #11
 80007ec:	430a      	orrs	r2, r1
 80007ee:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f0:	4b30      	ldr	r3, [pc, #192]	; (80008b4 <HAL_UART_MspInit+0xf4>)
 80007f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007f4:	4b2f      	ldr	r3, [pc, #188]	; (80008b4 <HAL_UART_MspInit+0xf4>)
 80007f6:	2101      	movs	r1, #1
 80007f8:	430a      	orrs	r2, r1
 80007fa:	62da      	str	r2, [r3, #44]	; 0x2c
 80007fc:	4b2d      	ldr	r3, [pc, #180]	; (80008b4 <HAL_UART_MspInit+0xf4>)
 80007fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000800:	2201      	movs	r2, #1
 8000802:	4013      	ands	r3, r2
 8000804:	613b      	str	r3, [r7, #16]
 8000806:	693b      	ldr	r3, [r7, #16]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000808:	0021      	movs	r1, r4
 800080a:	187b      	adds	r3, r7, r1
 800080c:	220c      	movs	r2, #12
 800080e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000810:	187b      	adds	r3, r7, r1
 8000812:	2202      	movs	r2, #2
 8000814:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000816:	187b      	adds	r3, r7, r1
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800081c:	187b      	adds	r3, r7, r1
 800081e:	2203      	movs	r2, #3
 8000820:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 8000822:	187b      	adds	r3, r7, r1
 8000824:	2206      	movs	r2, #6
 8000826:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000828:	187a      	adds	r2, r7, r1
 800082a:	23a0      	movs	r3, #160	; 0xa0
 800082c:	05db      	lsls	r3, r3, #23
 800082e:	0011      	movs	r1, r2
 8000830:	0018      	movs	r0, r3
 8000832:	f000 fa43 	bl	8000cbc <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 8000836:	2200      	movs	r2, #0
 8000838:	2100      	movs	r1, #0
 800083a:	201d      	movs	r0, #29
 800083c:	f000 f984 	bl	8000b48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8000840:	201d      	movs	r0, #29
 8000842:	f000 f996 	bl	8000b72 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000846:	e02f      	b.n	80008a8 <HAL_UART_MspInit+0xe8>
  else if(uartHandle->Instance==USART2)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	4a1a      	ldr	r2, [pc, #104]	; (80008b8 <HAL_UART_MspInit+0xf8>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d12a      	bne.n	80008a8 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000852:	4b18      	ldr	r3, [pc, #96]	; (80008b4 <HAL_UART_MspInit+0xf4>)
 8000854:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000856:	4b17      	ldr	r3, [pc, #92]	; (80008b4 <HAL_UART_MspInit+0xf4>)
 8000858:	2180      	movs	r1, #128	; 0x80
 800085a:	0289      	lsls	r1, r1, #10
 800085c:	430a      	orrs	r2, r1
 800085e:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000860:	4b14      	ldr	r3, [pc, #80]	; (80008b4 <HAL_UART_MspInit+0xf4>)
 8000862:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000864:	4b13      	ldr	r3, [pc, #76]	; (80008b4 <HAL_UART_MspInit+0xf4>)
 8000866:	2101      	movs	r1, #1
 8000868:	430a      	orrs	r2, r1
 800086a:	62da      	str	r2, [r3, #44]	; 0x2c
 800086c:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <HAL_UART_MspInit+0xf4>)
 800086e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000870:	2201      	movs	r2, #1
 8000872:	4013      	ands	r3, r2
 8000874:	60fb      	str	r3, [r7, #12]
 8000876:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000878:	2114      	movs	r1, #20
 800087a:	187b      	adds	r3, r7, r1
 800087c:	22c0      	movs	r2, #192	; 0xc0
 800087e:	00d2      	lsls	r2, r2, #3
 8000880:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000882:	187b      	adds	r3, r7, r1
 8000884:	2202      	movs	r2, #2
 8000886:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000888:	187b      	adds	r3, r7, r1
 800088a:	2200      	movs	r2, #0
 800088c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800088e:	187b      	adds	r3, r7, r1
 8000890:	2203      	movs	r2, #3
 8000892:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART2;
 8000894:	187b      	adds	r3, r7, r1
 8000896:	2204      	movs	r2, #4
 8000898:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800089a:	187a      	adds	r2, r7, r1
 800089c:	23a0      	movs	r3, #160	; 0xa0
 800089e:	05db      	lsls	r3, r3, #23
 80008a0:	0011      	movs	r1, r2
 80008a2:	0018      	movs	r0, r3
 80008a4:	f000 fa0a 	bl	8000cbc <HAL_GPIO_Init>
}
 80008a8:	46c0      	nop			; (mov r8, r8)
 80008aa:	46bd      	mov	sp, r7
 80008ac:	b00b      	add	sp, #44	; 0x2c
 80008ae:	bd90      	pop	{r4, r7, pc}
 80008b0:	40004800 	.word	0x40004800
 80008b4:	40021000 	.word	0x40021000
 80008b8:	40004400 	.word	0x40004400

080008bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 80008bc:	480d      	ldr	r0, [pc, #52]	; (80008f4 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 80008be:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008c0:	480d      	ldr	r0, [pc, #52]	; (80008f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80008c2:	490e      	ldr	r1, [pc, #56]	; (80008fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80008c4:	4a0e      	ldr	r2, [pc, #56]	; (8000900 <LoopForever+0xe>)
  movs r3, #0
 80008c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008c8:	e002      	b.n	80008d0 <LoopCopyDataInit>

080008ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ce:	3304      	adds	r3, #4

080008d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008d4:	d3f9      	bcc.n	80008ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008d6:	4a0b      	ldr	r2, [pc, #44]	; (8000904 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008d8:	4c0b      	ldr	r4, [pc, #44]	; (8000908 <LoopForever+0x16>)
  movs r3, #0
 80008da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008dc:	e001      	b.n	80008e2 <LoopFillZerobss>

080008de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008e0:	3204      	adds	r2, #4

080008e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008e4:	d3fb      	bcc.n	80008de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80008e6:	f7ff ff08 	bl	80006fa <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008ea:	f002 fa31 	bl	8002d50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008ee:	f7ff fe33 	bl	8000558 <main>

080008f2 <LoopForever>:

LoopForever:
    b LoopForever
 80008f2:	e7fe      	b.n	80008f2 <LoopForever>
   ldr   r0, =_estack
 80008f4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80008f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008fc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000900:	08002e3c 	.word	0x08002e3c
  ldr r2, =_sbss
 8000904:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000908:	20000164 	.word	0x20000164

0800090c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800090c:	e7fe      	b.n	800090c <ADC1_COMP_IRQHandler>
	...

08000910 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b082      	sub	sp, #8
 8000914:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000916:	1dfb      	adds	r3, r7, #7
 8000918:	2200      	movs	r2, #0
 800091a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800091c:	4b0b      	ldr	r3, [pc, #44]	; (800094c <HAL_Init+0x3c>)
 800091e:	681a      	ldr	r2, [r3, #0]
 8000920:	4b0a      	ldr	r3, [pc, #40]	; (800094c <HAL_Init+0x3c>)
 8000922:	2140      	movs	r1, #64	; 0x40
 8000924:	430a      	orrs	r2, r1
 8000926:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000928:	2000      	movs	r0, #0
 800092a:	f000 f811 	bl	8000950 <HAL_InitTick>
 800092e:	1e03      	subs	r3, r0, #0
 8000930:	d003      	beq.n	800093a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000932:	1dfb      	adds	r3, r7, #7
 8000934:	2201      	movs	r2, #1
 8000936:	701a      	strb	r2, [r3, #0]
 8000938:	e001      	b.n	800093e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800093a:	f7ff fe23 	bl	8000584 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800093e:	1dfb      	adds	r3, r7, #7
 8000940:	781b      	ldrb	r3, [r3, #0]
}
 8000942:	0018      	movs	r0, r3
 8000944:	46bd      	mov	sp, r7
 8000946:	b002      	add	sp, #8
 8000948:	bd80      	pop	{r7, pc}
 800094a:	46c0      	nop			; (mov r8, r8)
 800094c:	40022000 	.word	0x40022000

08000950 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000950:	b590      	push	{r4, r7, lr}
 8000952:	b083      	sub	sp, #12
 8000954:	af00      	add	r7, sp, #0
 8000956:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000958:	4b14      	ldr	r3, [pc, #80]	; (80009ac <HAL_InitTick+0x5c>)
 800095a:	681c      	ldr	r4, [r3, #0]
 800095c:	4b14      	ldr	r3, [pc, #80]	; (80009b0 <HAL_InitTick+0x60>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	0019      	movs	r1, r3
 8000962:	23fa      	movs	r3, #250	; 0xfa
 8000964:	0098      	lsls	r0, r3, #2
 8000966:	f7ff fbcf 	bl	8000108 <__udivsi3>
 800096a:	0003      	movs	r3, r0
 800096c:	0019      	movs	r1, r3
 800096e:	0020      	movs	r0, r4
 8000970:	f7ff fbca 	bl	8000108 <__udivsi3>
 8000974:	0003      	movs	r3, r0
 8000976:	0018      	movs	r0, r3
 8000978:	f000 f90b 	bl	8000b92 <HAL_SYSTICK_Config>
 800097c:	1e03      	subs	r3, r0, #0
 800097e:	d001      	beq.n	8000984 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000980:	2301      	movs	r3, #1
 8000982:	e00f      	b.n	80009a4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	2b03      	cmp	r3, #3
 8000988:	d80b      	bhi.n	80009a2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800098a:	6879      	ldr	r1, [r7, #4]
 800098c:	2301      	movs	r3, #1
 800098e:	425b      	negs	r3, r3
 8000990:	2200      	movs	r2, #0
 8000992:	0018      	movs	r0, r3
 8000994:	f000 f8d8 	bl	8000b48 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000998:	4b06      	ldr	r3, [pc, #24]	; (80009b4 <HAL_InitTick+0x64>)
 800099a:	687a      	ldr	r2, [r7, #4]
 800099c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800099e:	2300      	movs	r3, #0
 80009a0:	e000      	b.n	80009a4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80009a2:	2301      	movs	r3, #1
}
 80009a4:	0018      	movs	r0, r3
 80009a6:	46bd      	mov	sp, r7
 80009a8:	b003      	add	sp, #12
 80009aa:	bd90      	pop	{r4, r7, pc}
 80009ac:	20000000 	.word	0x20000000
 80009b0:	20000008 	.word	0x20000008
 80009b4:	20000004 	.word	0x20000004

080009b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009bc:	4b05      	ldr	r3, [pc, #20]	; (80009d4 <HAL_IncTick+0x1c>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	001a      	movs	r2, r3
 80009c2:	4b05      	ldr	r3, [pc, #20]	; (80009d8 <HAL_IncTick+0x20>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	18d2      	adds	r2, r2, r3
 80009c8:	4b03      	ldr	r3, [pc, #12]	; (80009d8 <HAL_IncTick+0x20>)
 80009ca:	601a      	str	r2, [r3, #0]
}
 80009cc:	46c0      	nop			; (mov r8, r8)
 80009ce:	46bd      	mov	sp, r7
 80009d0:	bd80      	pop	{r7, pc}
 80009d2:	46c0      	nop			; (mov r8, r8)
 80009d4:	20000008 	.word	0x20000008
 80009d8:	20000160 	.word	0x20000160

080009dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  return uwTick;
 80009e0:	4b02      	ldr	r3, [pc, #8]	; (80009ec <HAL_GetTick+0x10>)
 80009e2:	681b      	ldr	r3, [r3, #0]
}
 80009e4:	0018      	movs	r0, r3
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	46c0      	nop			; (mov r8, r8)
 80009ec:	20000160 	.word	0x20000160

080009f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	0002      	movs	r2, r0
 80009f8:	1dfb      	adds	r3, r7, #7
 80009fa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80009fc:	1dfb      	adds	r3, r7, #7
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	2b7f      	cmp	r3, #127	; 0x7f
 8000a02:	d809      	bhi.n	8000a18 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a04:	1dfb      	adds	r3, r7, #7
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	001a      	movs	r2, r3
 8000a0a:	231f      	movs	r3, #31
 8000a0c:	401a      	ands	r2, r3
 8000a0e:	4b04      	ldr	r3, [pc, #16]	; (8000a20 <__NVIC_EnableIRQ+0x30>)
 8000a10:	2101      	movs	r1, #1
 8000a12:	4091      	lsls	r1, r2
 8000a14:	000a      	movs	r2, r1
 8000a16:	601a      	str	r2, [r3, #0]
  }
}
 8000a18:	46c0      	nop			; (mov r8, r8)
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	b002      	add	sp, #8
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	e000e100 	.word	0xe000e100

08000a24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a24:	b590      	push	{r4, r7, lr}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	0002      	movs	r2, r0
 8000a2c:	6039      	str	r1, [r7, #0]
 8000a2e:	1dfb      	adds	r3, r7, #7
 8000a30:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000a32:	1dfb      	adds	r3, r7, #7
 8000a34:	781b      	ldrb	r3, [r3, #0]
 8000a36:	2b7f      	cmp	r3, #127	; 0x7f
 8000a38:	d828      	bhi.n	8000a8c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a3a:	4a2f      	ldr	r2, [pc, #188]	; (8000af8 <__NVIC_SetPriority+0xd4>)
 8000a3c:	1dfb      	adds	r3, r7, #7
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	b25b      	sxtb	r3, r3
 8000a42:	089b      	lsrs	r3, r3, #2
 8000a44:	33c0      	adds	r3, #192	; 0xc0
 8000a46:	009b      	lsls	r3, r3, #2
 8000a48:	589b      	ldr	r3, [r3, r2]
 8000a4a:	1dfa      	adds	r2, r7, #7
 8000a4c:	7812      	ldrb	r2, [r2, #0]
 8000a4e:	0011      	movs	r1, r2
 8000a50:	2203      	movs	r2, #3
 8000a52:	400a      	ands	r2, r1
 8000a54:	00d2      	lsls	r2, r2, #3
 8000a56:	21ff      	movs	r1, #255	; 0xff
 8000a58:	4091      	lsls	r1, r2
 8000a5a:	000a      	movs	r2, r1
 8000a5c:	43d2      	mvns	r2, r2
 8000a5e:	401a      	ands	r2, r3
 8000a60:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	019b      	lsls	r3, r3, #6
 8000a66:	22ff      	movs	r2, #255	; 0xff
 8000a68:	401a      	ands	r2, r3
 8000a6a:	1dfb      	adds	r3, r7, #7
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	0018      	movs	r0, r3
 8000a70:	2303      	movs	r3, #3
 8000a72:	4003      	ands	r3, r0
 8000a74:	00db      	lsls	r3, r3, #3
 8000a76:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a78:	481f      	ldr	r0, [pc, #124]	; (8000af8 <__NVIC_SetPriority+0xd4>)
 8000a7a:	1dfb      	adds	r3, r7, #7
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	b25b      	sxtb	r3, r3
 8000a80:	089b      	lsrs	r3, r3, #2
 8000a82:	430a      	orrs	r2, r1
 8000a84:	33c0      	adds	r3, #192	; 0xc0
 8000a86:	009b      	lsls	r3, r3, #2
 8000a88:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000a8a:	e031      	b.n	8000af0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000a8c:	4a1b      	ldr	r2, [pc, #108]	; (8000afc <__NVIC_SetPriority+0xd8>)
 8000a8e:	1dfb      	adds	r3, r7, #7
 8000a90:	781b      	ldrb	r3, [r3, #0]
 8000a92:	0019      	movs	r1, r3
 8000a94:	230f      	movs	r3, #15
 8000a96:	400b      	ands	r3, r1
 8000a98:	3b08      	subs	r3, #8
 8000a9a:	089b      	lsrs	r3, r3, #2
 8000a9c:	3306      	adds	r3, #6
 8000a9e:	009b      	lsls	r3, r3, #2
 8000aa0:	18d3      	adds	r3, r2, r3
 8000aa2:	3304      	adds	r3, #4
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	1dfa      	adds	r2, r7, #7
 8000aa8:	7812      	ldrb	r2, [r2, #0]
 8000aaa:	0011      	movs	r1, r2
 8000aac:	2203      	movs	r2, #3
 8000aae:	400a      	ands	r2, r1
 8000ab0:	00d2      	lsls	r2, r2, #3
 8000ab2:	21ff      	movs	r1, #255	; 0xff
 8000ab4:	4091      	lsls	r1, r2
 8000ab6:	000a      	movs	r2, r1
 8000ab8:	43d2      	mvns	r2, r2
 8000aba:	401a      	ands	r2, r3
 8000abc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000abe:	683b      	ldr	r3, [r7, #0]
 8000ac0:	019b      	lsls	r3, r3, #6
 8000ac2:	22ff      	movs	r2, #255	; 0xff
 8000ac4:	401a      	ands	r2, r3
 8000ac6:	1dfb      	adds	r3, r7, #7
 8000ac8:	781b      	ldrb	r3, [r3, #0]
 8000aca:	0018      	movs	r0, r3
 8000acc:	2303      	movs	r3, #3
 8000ace:	4003      	ands	r3, r0
 8000ad0:	00db      	lsls	r3, r3, #3
 8000ad2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000ad4:	4809      	ldr	r0, [pc, #36]	; (8000afc <__NVIC_SetPriority+0xd8>)
 8000ad6:	1dfb      	adds	r3, r7, #7
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	001c      	movs	r4, r3
 8000adc:	230f      	movs	r3, #15
 8000ade:	4023      	ands	r3, r4
 8000ae0:	3b08      	subs	r3, #8
 8000ae2:	089b      	lsrs	r3, r3, #2
 8000ae4:	430a      	orrs	r2, r1
 8000ae6:	3306      	adds	r3, #6
 8000ae8:	009b      	lsls	r3, r3, #2
 8000aea:	18c3      	adds	r3, r0, r3
 8000aec:	3304      	adds	r3, #4
 8000aee:	601a      	str	r2, [r3, #0]
}
 8000af0:	46c0      	nop			; (mov r8, r8)
 8000af2:	46bd      	mov	sp, r7
 8000af4:	b003      	add	sp, #12
 8000af6:	bd90      	pop	{r4, r7, pc}
 8000af8:	e000e100 	.word	0xe000e100
 8000afc:	e000ed00 	.word	0xe000ed00

08000b00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	1e5a      	subs	r2, r3, #1
 8000b0c:	2380      	movs	r3, #128	; 0x80
 8000b0e:	045b      	lsls	r3, r3, #17
 8000b10:	429a      	cmp	r2, r3
 8000b12:	d301      	bcc.n	8000b18 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b14:	2301      	movs	r3, #1
 8000b16:	e010      	b.n	8000b3a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b18:	4b0a      	ldr	r3, [pc, #40]	; (8000b44 <SysTick_Config+0x44>)
 8000b1a:	687a      	ldr	r2, [r7, #4]
 8000b1c:	3a01      	subs	r2, #1
 8000b1e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b20:	2301      	movs	r3, #1
 8000b22:	425b      	negs	r3, r3
 8000b24:	2103      	movs	r1, #3
 8000b26:	0018      	movs	r0, r3
 8000b28:	f7ff ff7c 	bl	8000a24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b2c:	4b05      	ldr	r3, [pc, #20]	; (8000b44 <SysTick_Config+0x44>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b32:	4b04      	ldr	r3, [pc, #16]	; (8000b44 <SysTick_Config+0x44>)
 8000b34:	2207      	movs	r2, #7
 8000b36:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b38:	2300      	movs	r3, #0
}
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	b002      	add	sp, #8
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	46c0      	nop			; (mov r8, r8)
 8000b44:	e000e010 	.word	0xe000e010

08000b48 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b084      	sub	sp, #16
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	60b9      	str	r1, [r7, #8]
 8000b50:	607a      	str	r2, [r7, #4]
 8000b52:	210f      	movs	r1, #15
 8000b54:	187b      	adds	r3, r7, r1
 8000b56:	1c02      	adds	r2, r0, #0
 8000b58:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000b5a:	68ba      	ldr	r2, [r7, #8]
 8000b5c:	187b      	adds	r3, r7, r1
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	b25b      	sxtb	r3, r3
 8000b62:	0011      	movs	r1, r2
 8000b64:	0018      	movs	r0, r3
 8000b66:	f7ff ff5d 	bl	8000a24 <__NVIC_SetPriority>
}
 8000b6a:	46c0      	nop			; (mov r8, r8)
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	b004      	add	sp, #16
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b72:	b580      	push	{r7, lr}
 8000b74:	b082      	sub	sp, #8
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	0002      	movs	r2, r0
 8000b7a:	1dfb      	adds	r3, r7, #7
 8000b7c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b7e:	1dfb      	adds	r3, r7, #7
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	b25b      	sxtb	r3, r3
 8000b84:	0018      	movs	r0, r3
 8000b86:	f7ff ff33 	bl	80009f0 <__NVIC_EnableIRQ>
}
 8000b8a:	46c0      	nop			; (mov r8, r8)
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	b002      	add	sp, #8
 8000b90:	bd80      	pop	{r7, pc}

08000b92 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b082      	sub	sp, #8
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	0018      	movs	r0, r3
 8000b9e:	f7ff ffaf 	bl	8000b00 <SysTick_Config>
 8000ba2:	0003      	movs	r3, r0
}
 8000ba4:	0018      	movs	r0, r3
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	b002      	add	sp, #8
 8000baa:	bd80      	pop	{r7, pc}

08000bac <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b084      	sub	sp, #16
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000bb4:	230f      	movs	r3, #15
 8000bb6:	18fb      	adds	r3, r7, r3
 8000bb8:	2200      	movs	r2, #0
 8000bba:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	2225      	movs	r2, #37	; 0x25
 8000bc0:	5c9b      	ldrb	r3, [r3, r2]
 8000bc2:	b2db      	uxtb	r3, r3
 8000bc4:	2b02      	cmp	r3, #2
 8000bc6:	d008      	beq.n	8000bda <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	2204      	movs	r2, #4
 8000bcc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2224      	movs	r2, #36	; 0x24
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	e024      	b.n	8000c24 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	681a      	ldr	r2, [r3, #0]
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	210e      	movs	r1, #14
 8000be6:	438a      	bics	r2, r1
 8000be8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	681a      	ldr	r2, [r3, #0]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	2101      	movs	r1, #1
 8000bf6:	438a      	bics	r2, r1
 8000bf8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bfe:	221c      	movs	r2, #28
 8000c00:	401a      	ands	r2, r3
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c06:	2101      	movs	r1, #1
 8000c08:	4091      	lsls	r1, r2
 8000c0a:	000a      	movs	r2, r1
 8000c0c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	2225      	movs	r2, #37	; 0x25
 8000c12:	2101      	movs	r1, #1
 8000c14:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2224      	movs	r2, #36	; 0x24
 8000c1a:	2100      	movs	r1, #0
 8000c1c:	5499      	strb	r1, [r3, r2]

    return status;
 8000c1e:	230f      	movs	r3, #15
 8000c20:	18fb      	adds	r3, r7, r3
 8000c22:	781b      	ldrb	r3, [r3, #0]
  }
}
 8000c24:	0018      	movs	r0, r3
 8000c26:	46bd      	mov	sp, r7
 8000c28:	b004      	add	sp, #16
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c34:	210f      	movs	r1, #15
 8000c36:	187b      	adds	r3, r7, r1
 8000c38:	2200      	movs	r2, #0
 8000c3a:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2225      	movs	r2, #37	; 0x25
 8000c40:	5c9b      	ldrb	r3, [r3, r2]
 8000c42:	b2db      	uxtb	r3, r3
 8000c44:	2b02      	cmp	r3, #2
 8000c46:	d006      	beq.n	8000c56 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	2204      	movs	r2, #4
 8000c4c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000c4e:	187b      	adds	r3, r7, r1
 8000c50:	2201      	movs	r2, #1
 8000c52:	701a      	strb	r2, [r3, #0]
 8000c54:	e02a      	b.n	8000cac <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	210e      	movs	r1, #14
 8000c62:	438a      	bics	r2, r1
 8000c64:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	2101      	movs	r1, #1
 8000c72:	438a      	bics	r2, r1
 8000c74:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c7a:	221c      	movs	r2, #28
 8000c7c:	401a      	ands	r2, r3
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c82:	2101      	movs	r1, #1
 8000c84:	4091      	lsls	r1, r2
 8000c86:	000a      	movs	r2, r1
 8000c88:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	2225      	movs	r2, #37	; 0x25
 8000c8e:	2101      	movs	r1, #1
 8000c90:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	2224      	movs	r2, #36	; 0x24
 8000c96:	2100      	movs	r1, #0
 8000c98:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d004      	beq.n	8000cac <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ca6:	687a      	ldr	r2, [r7, #4]
 8000ca8:	0010      	movs	r0, r2
 8000caa:	4798      	blx	r3
    }
  }
  return status;
 8000cac:	230f      	movs	r3, #15
 8000cae:	18fb      	adds	r3, r7, r3
 8000cb0:	781b      	ldrb	r3, [r3, #0]
}
 8000cb2:	0018      	movs	r0, r3
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	b004      	add	sp, #16
 8000cb8:	bd80      	pop	{r7, pc}
	...

08000cbc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b086      	sub	sp, #24
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000cd2:	e149      	b.n	8000f68 <HAL_GPIO_Init+0x2ac>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	2101      	movs	r1, #1
 8000cda:	697a      	ldr	r2, [r7, #20]
 8000cdc:	4091      	lsls	r1, r2
 8000cde:	000a      	movs	r2, r1
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000ce4:	68fb      	ldr	r3, [r7, #12]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d100      	bne.n	8000cec <HAL_GPIO_Init+0x30>
 8000cea:	e13a      	b.n	8000f62 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d00b      	beq.n	8000d0c <HAL_GPIO_Init+0x50>
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	685b      	ldr	r3, [r3, #4]
 8000cf8:	2b02      	cmp	r3, #2
 8000cfa:	d007      	beq.n	8000d0c <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000d00:	2b11      	cmp	r3, #17
 8000d02:	d003      	beq.n	8000d0c <HAL_GPIO_Init+0x50>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	2b12      	cmp	r3, #18
 8000d0a:	d130      	bne.n	8000d6e <HAL_GPIO_Init+0xb2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	689b      	ldr	r3, [r3, #8]
 8000d10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	005b      	lsls	r3, r3, #1
 8000d16:	2203      	movs	r2, #3
 8000d18:	409a      	lsls	r2, r3
 8000d1a:	0013      	movs	r3, r2
 8000d1c:	43da      	mvns	r2, r3
 8000d1e:	693b      	ldr	r3, [r7, #16]
 8000d20:	4013      	ands	r3, r2
 8000d22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	68da      	ldr	r2, [r3, #12]
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	005b      	lsls	r3, r3, #1
 8000d2c:	409a      	lsls	r2, r3
 8000d2e:	0013      	movs	r3, r2
 8000d30:	693a      	ldr	r2, [r7, #16]
 8000d32:	4313      	orrs	r3, r2
 8000d34:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	693a      	ldr	r2, [r7, #16]
 8000d3a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	685b      	ldr	r3, [r3, #4]
 8000d40:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d42:	2201      	movs	r2, #1
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	409a      	lsls	r2, r3
 8000d48:	0013      	movs	r3, r2
 8000d4a:	43da      	mvns	r2, r3
 8000d4c:	693b      	ldr	r3, [r7, #16]
 8000d4e:	4013      	ands	r3, r2
 8000d50:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000d52:	683b      	ldr	r3, [r7, #0]
 8000d54:	685b      	ldr	r3, [r3, #4]
 8000d56:	091b      	lsrs	r3, r3, #4
 8000d58:	2201      	movs	r2, #1
 8000d5a:	401a      	ands	r2, r3
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	409a      	lsls	r2, r3
 8000d60:	0013      	movs	r3, r2
 8000d62:	693a      	ldr	r2, [r7, #16]
 8000d64:	4313      	orrs	r3, r2
 8000d66:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	693a      	ldr	r2, [r7, #16]
 8000d6c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	68db      	ldr	r3, [r3, #12]
 8000d72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	005b      	lsls	r3, r3, #1
 8000d78:	2203      	movs	r2, #3
 8000d7a:	409a      	lsls	r2, r3
 8000d7c:	0013      	movs	r3, r2
 8000d7e:	43da      	mvns	r2, r3
 8000d80:	693b      	ldr	r3, [r7, #16]
 8000d82:	4013      	ands	r3, r2
 8000d84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d86:	683b      	ldr	r3, [r7, #0]
 8000d88:	689a      	ldr	r2, [r3, #8]
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	005b      	lsls	r3, r3, #1
 8000d8e:	409a      	lsls	r2, r3
 8000d90:	0013      	movs	r3, r2
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	4313      	orrs	r3, r2
 8000d96:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	685b      	ldr	r3, [r3, #4]
 8000da2:	2b02      	cmp	r3, #2
 8000da4:	d003      	beq.n	8000dae <HAL_GPIO_Init+0xf2>
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	2b12      	cmp	r3, #18
 8000dac:	d123      	bne.n	8000df6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	08da      	lsrs	r2, r3, #3
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	3208      	adds	r2, #8
 8000db6:	0092      	lsls	r2, r2, #2
 8000db8:	58d3      	ldr	r3, [r2, r3]
 8000dba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	2207      	movs	r2, #7
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	009b      	lsls	r3, r3, #2
 8000dc4:	220f      	movs	r2, #15
 8000dc6:	409a      	lsls	r2, r3
 8000dc8:	0013      	movs	r3, r2
 8000dca:	43da      	mvns	r2, r3
 8000dcc:	693b      	ldr	r3, [r7, #16]
 8000dce:	4013      	ands	r3, r2
 8000dd0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	691a      	ldr	r2, [r3, #16]
 8000dd6:	697b      	ldr	r3, [r7, #20]
 8000dd8:	2107      	movs	r1, #7
 8000dda:	400b      	ands	r3, r1
 8000ddc:	009b      	lsls	r3, r3, #2
 8000dde:	409a      	lsls	r2, r3
 8000de0:	0013      	movs	r3, r2
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	08da      	lsrs	r2, r3, #3
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	3208      	adds	r2, #8
 8000df0:	0092      	lsls	r2, r2, #2
 8000df2:	6939      	ldr	r1, [r7, #16]
 8000df4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000dfc:	697b      	ldr	r3, [r7, #20]
 8000dfe:	005b      	lsls	r3, r3, #1
 8000e00:	2203      	movs	r2, #3
 8000e02:	409a      	lsls	r2, r3
 8000e04:	0013      	movs	r3, r2
 8000e06:	43da      	mvns	r2, r3
 8000e08:	693b      	ldr	r3, [r7, #16]
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	2203      	movs	r2, #3
 8000e14:	401a      	ands	r2, r3
 8000e16:	697b      	ldr	r3, [r7, #20]
 8000e18:	005b      	lsls	r3, r3, #1
 8000e1a:	409a      	lsls	r2, r3
 8000e1c:	0013      	movs	r3, r2
 8000e1e:	693a      	ldr	r2, [r7, #16]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	693a      	ldr	r2, [r7, #16]
 8000e28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	685a      	ldr	r2, [r3, #4]
 8000e2e:	2380      	movs	r3, #128	; 0x80
 8000e30:	055b      	lsls	r3, r3, #21
 8000e32:	4013      	ands	r3, r2
 8000e34:	d100      	bne.n	8000e38 <HAL_GPIO_Init+0x17c>
 8000e36:	e094      	b.n	8000f62 <HAL_GPIO_Init+0x2a6>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e38:	4b51      	ldr	r3, [pc, #324]	; (8000f80 <HAL_GPIO_Init+0x2c4>)
 8000e3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e3c:	4b50      	ldr	r3, [pc, #320]	; (8000f80 <HAL_GPIO_Init+0x2c4>)
 8000e3e:	2101      	movs	r1, #1
 8000e40:	430a      	orrs	r2, r1
 8000e42:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8000e44:	4a4f      	ldr	r2, [pc, #316]	; (8000f84 <HAL_GPIO_Init+0x2c8>)
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	089b      	lsrs	r3, r3, #2
 8000e4a:	3302      	adds	r3, #2
 8000e4c:	009b      	lsls	r3, r3, #2
 8000e4e:	589b      	ldr	r3, [r3, r2]
 8000e50:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8000e52:	697b      	ldr	r3, [r7, #20]
 8000e54:	2203      	movs	r2, #3
 8000e56:	4013      	ands	r3, r2
 8000e58:	009b      	lsls	r3, r3, #2
 8000e5a:	220f      	movs	r2, #15
 8000e5c:	409a      	lsls	r2, r3
 8000e5e:	0013      	movs	r3, r2
 8000e60:	43da      	mvns	r2, r3
 8000e62:	693b      	ldr	r3, [r7, #16]
 8000e64:	4013      	ands	r3, r2
 8000e66:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8000e68:	687a      	ldr	r2, [r7, #4]
 8000e6a:	23a0      	movs	r3, #160	; 0xa0
 8000e6c:	05db      	lsls	r3, r3, #23
 8000e6e:	429a      	cmp	r2, r3
 8000e70:	d013      	beq.n	8000e9a <HAL_GPIO_Init+0x1de>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4a44      	ldr	r2, [pc, #272]	; (8000f88 <HAL_GPIO_Init+0x2cc>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d00d      	beq.n	8000e96 <HAL_GPIO_Init+0x1da>
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	4a43      	ldr	r2, [pc, #268]	; (8000f8c <HAL_GPIO_Init+0x2d0>)
 8000e7e:	4293      	cmp	r3, r2
 8000e80:	d007      	beq.n	8000e92 <HAL_GPIO_Init+0x1d6>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	4a42      	ldr	r2, [pc, #264]	; (8000f90 <HAL_GPIO_Init+0x2d4>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d101      	bne.n	8000e8e <HAL_GPIO_Init+0x1d2>
 8000e8a:	2305      	movs	r3, #5
 8000e8c:	e006      	b.n	8000e9c <HAL_GPIO_Init+0x1e0>
 8000e8e:	2306      	movs	r3, #6
 8000e90:	e004      	b.n	8000e9c <HAL_GPIO_Init+0x1e0>
 8000e92:	2302      	movs	r3, #2
 8000e94:	e002      	b.n	8000e9c <HAL_GPIO_Init+0x1e0>
 8000e96:	2301      	movs	r3, #1
 8000e98:	e000      	b.n	8000e9c <HAL_GPIO_Init+0x1e0>
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	697a      	ldr	r2, [r7, #20]
 8000e9e:	2103      	movs	r1, #3
 8000ea0:	400a      	ands	r2, r1
 8000ea2:	0092      	lsls	r2, r2, #2
 8000ea4:	4093      	lsls	r3, r2
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	4313      	orrs	r3, r2
 8000eaa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000eac:	4935      	ldr	r1, [pc, #212]	; (8000f84 <HAL_GPIO_Init+0x2c8>)
 8000eae:	697b      	ldr	r3, [r7, #20]
 8000eb0:	089b      	lsrs	r3, r3, #2
 8000eb2:	3302      	adds	r3, #2
 8000eb4:	009b      	lsls	r3, r3, #2
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000eba:	4b36      	ldr	r3, [pc, #216]	; (8000f94 <HAL_GPIO_Init+0x2d8>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	43da      	mvns	r2, r3
 8000ec4:	693b      	ldr	r3, [r7, #16]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000eca:	683b      	ldr	r3, [r7, #0]
 8000ecc:	685a      	ldr	r2, [r3, #4]
 8000ece:	2380      	movs	r3, #128	; 0x80
 8000ed0:	025b      	lsls	r3, r3, #9
 8000ed2:	4013      	ands	r3, r2
 8000ed4:	d003      	beq.n	8000ede <HAL_GPIO_Init+0x222>
        {
          temp |= iocurrent;
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000ede:	4b2d      	ldr	r3, [pc, #180]	; (8000f94 <HAL_GPIO_Init+0x2d8>)
 8000ee0:	693a      	ldr	r2, [r7, #16]
 8000ee2:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8000ee4:	4b2b      	ldr	r3, [pc, #172]	; (8000f94 <HAL_GPIO_Init+0x2d8>)
 8000ee6:	685b      	ldr	r3, [r3, #4]
 8000ee8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	43da      	mvns	r2, r3
 8000eee:	693b      	ldr	r3, [r7, #16]
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ef4:	683b      	ldr	r3, [r7, #0]
 8000ef6:	685a      	ldr	r2, [r3, #4]
 8000ef8:	2380      	movs	r3, #128	; 0x80
 8000efa:	029b      	lsls	r3, r3, #10
 8000efc:	4013      	ands	r3, r2
 8000efe:	d003      	beq.n	8000f08 <HAL_GPIO_Init+0x24c>
        {
          temp |= iocurrent;
 8000f00:	693a      	ldr	r2, [r7, #16]
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000f08:	4b22      	ldr	r3, [pc, #136]	; (8000f94 <HAL_GPIO_Init+0x2d8>)
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f0e:	4b21      	ldr	r3, [pc, #132]	; (8000f94 <HAL_GPIO_Init+0x2d8>)
 8000f10:	689b      	ldr	r3, [r3, #8]
 8000f12:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	43da      	mvns	r2, r3
 8000f18:	693b      	ldr	r3, [r7, #16]
 8000f1a:	4013      	ands	r3, r2
 8000f1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685a      	ldr	r2, [r3, #4]
 8000f22:	2380      	movs	r3, #128	; 0x80
 8000f24:	035b      	lsls	r3, r3, #13
 8000f26:	4013      	ands	r3, r2
 8000f28:	d003      	beq.n	8000f32 <HAL_GPIO_Init+0x276>
        {
          temp |= iocurrent;
 8000f2a:	693a      	ldr	r2, [r7, #16]
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	4313      	orrs	r3, r2
 8000f30:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000f32:	4b18      	ldr	r3, [pc, #96]	; (8000f94 <HAL_GPIO_Init+0x2d8>)
 8000f34:	693a      	ldr	r2, [r7, #16]
 8000f36:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8000f38:	4b16      	ldr	r3, [pc, #88]	; (8000f94 <HAL_GPIO_Init+0x2d8>)
 8000f3a:	68db      	ldr	r3, [r3, #12]
 8000f3c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000f3e:	68fb      	ldr	r3, [r7, #12]
 8000f40:	43da      	mvns	r2, r3
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	4013      	ands	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685a      	ldr	r2, [r3, #4]
 8000f4c:	2380      	movs	r3, #128	; 0x80
 8000f4e:	039b      	lsls	r3, r3, #14
 8000f50:	4013      	ands	r3, r2
 8000f52:	d003      	beq.n	8000f5c <HAL_GPIO_Init+0x2a0>
        {
          temp |= iocurrent;
 8000f54:	693a      	ldr	r2, [r7, #16]
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000f5c:	4b0d      	ldr	r3, [pc, #52]	; (8000f94 <HAL_GPIO_Init+0x2d8>)
 8000f5e:	693a      	ldr	r2, [r7, #16]
 8000f60:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8000f62:	697b      	ldr	r3, [r7, #20]
 8000f64:	3301      	adds	r3, #1
 8000f66:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	40da      	lsrs	r2, r3
 8000f70:	1e13      	subs	r3, r2, #0
 8000f72:	d000      	beq.n	8000f76 <HAL_GPIO_Init+0x2ba>
 8000f74:	e6ae      	b.n	8000cd4 <HAL_GPIO_Init+0x18>
  }
}
 8000f76:	46c0      	nop			; (mov r8, r8)
 8000f78:	46c0      	nop			; (mov r8, r8)
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	b006      	add	sp, #24
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	40021000 	.word	0x40021000
 8000f84:	40010000 	.word	0x40010000
 8000f88:	50000400 	.word	0x50000400
 8000f8c:	50000800 	.word	0x50000800
 8000f90:	50001c00 	.word	0x50001c00
 8000f94:	40010400 	.word	0x40010400

08000f98 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b084      	sub	sp, #16
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d101      	bne.n	8000faa <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e06e      	b.n	8001088 <HAL_LPTIM_Init+0xf0>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	222e      	movs	r2, #46	; 0x2e
 8000fae:	5c9b      	ldrb	r3, [r3, r2]
 8000fb0:	b2db      	uxtb	r3, r3
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d107      	bne.n	8000fc6 <HAL_LPTIM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	222d      	movs	r2, #45	; 0x2d
 8000fba:	2100      	movs	r1, #0
 8000fbc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	0018      	movs	r0, r3
 8000fc2:	f7ff faa9 	bl	8000518 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	222e      	movs	r2, #46	; 0x2e
 8000fca:	2102      	movs	r1, #2
 8000fcc:	5499      	strb	r1, [r3, r2]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	68db      	ldr	r3, [r3, #12]
 8000fd4:	60fb      	str	r3, [r7, #12]

  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	685b      	ldr	r3, [r3, #4]
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d103      	bne.n	8000fe6 <HAL_LPTIM_Init+0x4e>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL));
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	2206      	movs	r2, #6
 8000fe2:	4393      	bics	r3, r2
 8000fe4:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	695b      	ldr	r3, [r3, #20]
 8000fea:	4a29      	ldr	r2, [pc, #164]	; (8001090 <HAL_LPTIM_Init+0xf8>)
 8000fec:	4293      	cmp	r3, r2
 8000fee:	d003      	beq.n	8000ff8 <HAL_LPTIM_Init+0x60>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRIGSEL));
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	4a28      	ldr	r2, [pc, #160]	; (8001094 <HAL_LPTIM_Init+0xfc>)
 8000ff4:	4013      	ands	r3, r2
 8000ff6:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	685b      	ldr	r3, [r3, #4]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d103      	bne.n	8001008 <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_CKFLT));
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	22d8      	movs	r2, #216	; 0xd8
 8001004:	4393      	bics	r3, r2
 8001006:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, CKPOL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_CKPOL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	4a23      	ldr	r2, [pc, #140]	; (8001098 <HAL_LPTIM_Init+0x100>)
 800100c:	4013      	ands	r3, r2
 800100e:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001018:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 800101e:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8001024:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 800102a:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 800102c:	68fa      	ldr	r2, [r7, #12]
 800102e:	4313      	orrs	r3, r2
 8001030:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d107      	bne.n	800104a <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8001042:	4313      	orrs	r3, r2
 8001044:	68fa      	ldr	r2, [r7, #12]
 8001046:	4313      	orrs	r3, r2
 8001048:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the active edge or edges used by the counter only if LPTIM is
   * clocked by an external clock source
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	2b01      	cmp	r3, #1
 8001050:	d104      	bne.n	800105c <HAL_LPTIM_Init+0xc4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	68db      	ldr	r3, [r3, #12]
 8001056:	68fa      	ldr	r2, [r7, #12]
 8001058:	4313      	orrs	r3, r2
 800105a:	60fb      	str	r3, [r7, #12]
  }

  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	695b      	ldr	r3, [r3, #20]
 8001060:	4a0b      	ldr	r2, [pc, #44]	; (8001090 <HAL_LPTIM_Init+0xf8>)
 8001062:	4293      	cmp	r3, r2
 8001064:	d007      	beq.n	8001076 <HAL_LPTIM_Init+0xde>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source |
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source |
 800106e:	4313      	orrs	r3, r2
 8001070:	68fa      	ldr	r2, [r7, #12]
 8001072:	4313      	orrs	r3, r2
 8001074:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	68fa      	ldr	r2, [r7, #12]
 800107c:	60da      	str	r2, [r3, #12]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	222e      	movs	r2, #46	; 0x2e
 8001082:	2101      	movs	r1, #1
 8001084:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8001086:	2300      	movs	r3, #0
}
 8001088:	0018      	movs	r0, r3
 800108a:	46bd      	mov	sp, r7
 800108c:	b004      	add	sp, #16
 800108e:	bd80      	pop	{r7, pc}
 8001090:	0000ffff 	.word	0x0000ffff
 8001094:	ffff1fff 	.word	0xffff1fff
 8001098:	ff19f1f8 	.word	0xff19f1f8

0800109c <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	2201      	movs	r2, #1
 80010ac:	4013      	ands	r3, r2
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d10e      	bne.n	80010d0 <HAL_LPTIM_IRQHandler+0x34>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	689b      	ldr	r3, [r3, #8]
 80010b8:	2201      	movs	r2, #1
 80010ba:	4013      	ands	r3, r2
 80010bc:	2b01      	cmp	r3, #1
 80010be:	d107      	bne.n	80010d0 <HAL_LPTIM_IRQHandler+0x34>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2201      	movs	r2, #1
 80010c6:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	0018      	movs	r0, r3
 80010cc:	f000 f888 	bl	80011e0 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	2202      	movs	r2, #2
 80010d8:	4013      	ands	r3, r2
 80010da:	2b02      	cmp	r3, #2
 80010dc:	d10e      	bne.n	80010fc <HAL_LPTIM_IRQHandler+0x60>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	689b      	ldr	r3, [r3, #8]
 80010e4:	2202      	movs	r2, #2
 80010e6:	4013      	ands	r3, r2
 80010e8:	2b02      	cmp	r3, #2
 80010ea:	d107      	bne.n	80010fc <HAL_LPTIM_IRQHandler+0x60>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2202      	movs	r2, #2
 80010f2:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	0018      	movs	r0, r3
 80010f8:	f000 f87a 	bl	80011f0 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	2204      	movs	r2, #4
 8001104:	4013      	ands	r3, r2
 8001106:	2b04      	cmp	r3, #4
 8001108:	d10e      	bne.n	8001128 <HAL_LPTIM_IRQHandler+0x8c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	689b      	ldr	r3, [r3, #8]
 8001110:	2204      	movs	r2, #4
 8001112:	4013      	ands	r3, r2
 8001114:	2b04      	cmp	r3, #4
 8001116:	d107      	bne.n	8001128 <HAL_LPTIM_IRQHandler+0x8c>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	2204      	movs	r2, #4
 800111e:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	0018      	movs	r0, r3
 8001124:	f000 f86c 	bl	8001200 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	2208      	movs	r2, #8
 8001130:	4013      	ands	r3, r2
 8001132:	2b08      	cmp	r3, #8
 8001134:	d10e      	bne.n	8001154 <HAL_LPTIM_IRQHandler+0xb8>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	2208      	movs	r2, #8
 800113e:	4013      	ands	r3, r2
 8001140:	2b08      	cmp	r3, #8
 8001142:	d107      	bne.n	8001154 <HAL_LPTIM_IRQHandler+0xb8>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2208      	movs	r2, #8
 800114a:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	0018      	movs	r0, r3
 8001150:	f000 f85e 	bl	8001210 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	2210      	movs	r2, #16
 800115c:	4013      	ands	r3, r2
 800115e:	2b10      	cmp	r3, #16
 8001160:	d10e      	bne.n	8001180 <HAL_LPTIM_IRQHandler+0xe4>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	2210      	movs	r2, #16
 800116a:	4013      	ands	r3, r2
 800116c:	2b10      	cmp	r3, #16
 800116e:	d107      	bne.n	8001180 <HAL_LPTIM_IRQHandler+0xe4>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2210      	movs	r2, #16
 8001176:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	0018      	movs	r0, r3
 800117c:	f000 f850 	bl	8001220 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	2220      	movs	r2, #32
 8001188:	4013      	ands	r3, r2
 800118a:	2b20      	cmp	r3, #32
 800118c:	d10e      	bne.n	80011ac <HAL_LPTIM_IRQHandler+0x110>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	2220      	movs	r2, #32
 8001196:	4013      	ands	r3, r2
 8001198:	2b20      	cmp	r3, #32
 800119a:	d107      	bne.n	80011ac <HAL_LPTIM_IRQHandler+0x110>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	2220      	movs	r2, #32
 80011a2:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	0018      	movs	r0, r3
 80011a8:	f000 f842 	bl	8001230 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	2240      	movs	r2, #64	; 0x40
 80011b4:	4013      	ands	r3, r2
 80011b6:	2b40      	cmp	r3, #64	; 0x40
 80011b8:	d10e      	bne.n	80011d8 <HAL_LPTIM_IRQHandler+0x13c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	2240      	movs	r2, #64	; 0x40
 80011c2:	4013      	ands	r3, r2
 80011c4:	2b40      	cmp	r3, #64	; 0x40
 80011c6:	d107      	bne.n	80011d8 <HAL_LPTIM_IRQHandler+0x13c>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	2240      	movs	r2, #64	; 0x40
 80011ce:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	0018      	movs	r0, r3
 80011d4:	f000 f834 	bl	8001240 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 80011d8:	46c0      	nop			; (mov r8, r8)
 80011da:	46bd      	mov	sp, r7
 80011dc:	b002      	add	sp, #8
 80011de:	bd80      	pop	{r7, pc}

080011e0 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b082      	sub	sp, #8
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 80011e8:	46c0      	nop			; (mov r8, r8)
 80011ea:	46bd      	mov	sp, r7
 80011ec:	b002      	add	sp, #8
 80011ee:	bd80      	pop	{r7, pc}

080011f0 <HAL_LPTIM_AutoReloadMatchCallback>:
  * @brief  Autoreload match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b082      	sub	sp, #8
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadMatchCallback could be implemented in the user file
   */
}
 80011f8:	46c0      	nop			; (mov r8, r8)
 80011fa:	46bd      	mov	sp, r7
 80011fc:	b002      	add	sp, #8
 80011fe:	bd80      	pop	{r7, pc}

08001200 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8001208:	46c0      	nop			; (mov r8, r8)
 800120a:	46bd      	mov	sp, r7
 800120c:	b002      	add	sp, #8
 800120e:	bd80      	pop	{r7, pc}

08001210 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b082      	sub	sp, #8
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8001218:	46c0      	nop			; (mov r8, r8)
 800121a:	46bd      	mov	sp, r7
 800121c:	b002      	add	sp, #8
 800121e:	bd80      	pop	{r7, pc}

08001220 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8001228:	46c0      	nop			; (mov r8, r8)
 800122a:	46bd      	mov	sp, r7
 800122c:	b002      	add	sp, #8
 800122e:	bd80      	pop	{r7, pc}

08001230 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8001238:	46c0      	nop			; (mov r8, r8)
 800123a:	46bd      	mov	sp, r7
 800123c:	b002      	add	sp, #8
 800123e:	bd80      	pop	{r7, pc}

08001240 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8001248:	46c0      	nop			; (mov r8, r8)
 800124a:	46bd      	mov	sp, r7
 800124c:	b002      	add	sp, #8
 800124e:	bd80      	pop	{r7, pc}

08001250 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001250:	b5b0      	push	{r4, r5, r7, lr}
 8001252:	b08a      	sub	sp, #40	; 0x28
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d102      	bne.n	8001264 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800125e:	2301      	movs	r3, #1
 8001260:	f000 fb6c 	bl	800193c <HAL_RCC_OscConfig+0x6ec>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001264:	4bc8      	ldr	r3, [pc, #800]	; (8001588 <HAL_RCC_OscConfig+0x338>)
 8001266:	68db      	ldr	r3, [r3, #12]
 8001268:	220c      	movs	r2, #12
 800126a:	4013      	ands	r3, r2
 800126c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800126e:	4bc6      	ldr	r3, [pc, #792]	; (8001588 <HAL_RCC_OscConfig+0x338>)
 8001270:	68da      	ldr	r2, [r3, #12]
 8001272:	2380      	movs	r3, #128	; 0x80
 8001274:	025b      	lsls	r3, r3, #9
 8001276:	4013      	ands	r3, r2
 8001278:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2201      	movs	r2, #1
 8001280:	4013      	ands	r3, r2
 8001282:	d100      	bne.n	8001286 <HAL_RCC_OscConfig+0x36>
 8001284:	e07d      	b.n	8001382 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	2b08      	cmp	r3, #8
 800128a:	d007      	beq.n	800129c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800128c:	69fb      	ldr	r3, [r7, #28]
 800128e:	2b0c      	cmp	r3, #12
 8001290:	d112      	bne.n	80012b8 <HAL_RCC_OscConfig+0x68>
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	2380      	movs	r3, #128	; 0x80
 8001296:	025b      	lsls	r3, r3, #9
 8001298:	429a      	cmp	r2, r3
 800129a:	d10d      	bne.n	80012b8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800129c:	4bba      	ldr	r3, [pc, #744]	; (8001588 <HAL_RCC_OscConfig+0x338>)
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	2380      	movs	r3, #128	; 0x80
 80012a2:	029b      	lsls	r3, r3, #10
 80012a4:	4013      	ands	r3, r2
 80012a6:	d100      	bne.n	80012aa <HAL_RCC_OscConfig+0x5a>
 80012a8:	e06a      	b.n	8001380 <HAL_RCC_OscConfig+0x130>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d166      	bne.n	8001380 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80012b2:	2301      	movs	r3, #1
 80012b4:	f000 fb42 	bl	800193c <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	685a      	ldr	r2, [r3, #4]
 80012bc:	2380      	movs	r3, #128	; 0x80
 80012be:	025b      	lsls	r3, r3, #9
 80012c0:	429a      	cmp	r2, r3
 80012c2:	d107      	bne.n	80012d4 <HAL_RCC_OscConfig+0x84>
 80012c4:	4bb0      	ldr	r3, [pc, #704]	; (8001588 <HAL_RCC_OscConfig+0x338>)
 80012c6:	681a      	ldr	r2, [r3, #0]
 80012c8:	4baf      	ldr	r3, [pc, #700]	; (8001588 <HAL_RCC_OscConfig+0x338>)
 80012ca:	2180      	movs	r1, #128	; 0x80
 80012cc:	0249      	lsls	r1, r1, #9
 80012ce:	430a      	orrs	r2, r1
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	e027      	b.n	8001324 <HAL_RCC_OscConfig+0xd4>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	685a      	ldr	r2, [r3, #4]
 80012d8:	23a0      	movs	r3, #160	; 0xa0
 80012da:	02db      	lsls	r3, r3, #11
 80012dc:	429a      	cmp	r2, r3
 80012de:	d10e      	bne.n	80012fe <HAL_RCC_OscConfig+0xae>
 80012e0:	4ba9      	ldr	r3, [pc, #676]	; (8001588 <HAL_RCC_OscConfig+0x338>)
 80012e2:	681a      	ldr	r2, [r3, #0]
 80012e4:	4ba8      	ldr	r3, [pc, #672]	; (8001588 <HAL_RCC_OscConfig+0x338>)
 80012e6:	2180      	movs	r1, #128	; 0x80
 80012e8:	02c9      	lsls	r1, r1, #11
 80012ea:	430a      	orrs	r2, r1
 80012ec:	601a      	str	r2, [r3, #0]
 80012ee:	4ba6      	ldr	r3, [pc, #664]	; (8001588 <HAL_RCC_OscConfig+0x338>)
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	4ba5      	ldr	r3, [pc, #660]	; (8001588 <HAL_RCC_OscConfig+0x338>)
 80012f4:	2180      	movs	r1, #128	; 0x80
 80012f6:	0249      	lsls	r1, r1, #9
 80012f8:	430a      	orrs	r2, r1
 80012fa:	601a      	str	r2, [r3, #0]
 80012fc:	e012      	b.n	8001324 <HAL_RCC_OscConfig+0xd4>
 80012fe:	4ba2      	ldr	r3, [pc, #648]	; (8001588 <HAL_RCC_OscConfig+0x338>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	4ba1      	ldr	r3, [pc, #644]	; (8001588 <HAL_RCC_OscConfig+0x338>)
 8001304:	49a1      	ldr	r1, [pc, #644]	; (800158c <HAL_RCC_OscConfig+0x33c>)
 8001306:	400a      	ands	r2, r1
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	4b9f      	ldr	r3, [pc, #636]	; (8001588 <HAL_RCC_OscConfig+0x338>)
 800130c:	681a      	ldr	r2, [r3, #0]
 800130e:	2380      	movs	r3, #128	; 0x80
 8001310:	025b      	lsls	r3, r3, #9
 8001312:	4013      	ands	r3, r2
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	4b9b      	ldr	r3, [pc, #620]	; (8001588 <HAL_RCC_OscConfig+0x338>)
 800131a:	681a      	ldr	r2, [r3, #0]
 800131c:	4b9a      	ldr	r3, [pc, #616]	; (8001588 <HAL_RCC_OscConfig+0x338>)
 800131e:	499c      	ldr	r1, [pc, #624]	; (8001590 <HAL_RCC_OscConfig+0x340>)
 8001320:	400a      	ands	r2, r1
 8001322:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d014      	beq.n	8001356 <HAL_RCC_OscConfig+0x106>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800132c:	f7ff fb56 	bl	80009dc <HAL_GetTick>
 8001330:	0003      	movs	r3, r0
 8001332:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001334:	e008      	b.n	8001348 <HAL_RCC_OscConfig+0xf8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001336:	f7ff fb51 	bl	80009dc <HAL_GetTick>
 800133a:	0002      	movs	r2, r0
 800133c:	697b      	ldr	r3, [r7, #20]
 800133e:	1ad3      	subs	r3, r2, r3
 8001340:	2b64      	cmp	r3, #100	; 0x64
 8001342:	d901      	bls.n	8001348 <HAL_RCC_OscConfig+0xf8>
          {
            return HAL_TIMEOUT;
 8001344:	2303      	movs	r3, #3
 8001346:	e2f9      	b.n	800193c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001348:	4b8f      	ldr	r3, [pc, #572]	; (8001588 <HAL_RCC_OscConfig+0x338>)
 800134a:	681a      	ldr	r2, [r3, #0]
 800134c:	2380      	movs	r3, #128	; 0x80
 800134e:	029b      	lsls	r3, r3, #10
 8001350:	4013      	ands	r3, r2
 8001352:	d0f0      	beq.n	8001336 <HAL_RCC_OscConfig+0xe6>
 8001354:	e015      	b.n	8001382 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001356:	f7ff fb41 	bl	80009dc <HAL_GetTick>
 800135a:	0003      	movs	r3, r0
 800135c:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800135e:	e008      	b.n	8001372 <HAL_RCC_OscConfig+0x122>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001360:	f7ff fb3c 	bl	80009dc <HAL_GetTick>
 8001364:	0002      	movs	r2, r0
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	2b64      	cmp	r3, #100	; 0x64
 800136c:	d901      	bls.n	8001372 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800136e:	2303      	movs	r3, #3
 8001370:	e2e4      	b.n	800193c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001372:	4b85      	ldr	r3, [pc, #532]	; (8001588 <HAL_RCC_OscConfig+0x338>)
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	2380      	movs	r3, #128	; 0x80
 8001378:	029b      	lsls	r3, r3, #10
 800137a:	4013      	ands	r3, r2
 800137c:	d1f0      	bne.n	8001360 <HAL_RCC_OscConfig+0x110>
 800137e:	e000      	b.n	8001382 <HAL_RCC_OscConfig+0x132>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001380:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	2202      	movs	r2, #2
 8001388:	4013      	ands	r3, r2
 800138a:	d100      	bne.n	800138e <HAL_RCC_OscConfig+0x13e>
 800138c:	e099      	b.n	80014c2 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	68db      	ldr	r3, [r3, #12]
 8001392:	627b      	str	r3, [r7, #36]	; 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8001394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001396:	2220      	movs	r2, #32
 8001398:	4013      	ands	r3, r2
 800139a:	d009      	beq.n	80013b0 <HAL_RCC_OscConfig+0x160>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 800139c:	4b7a      	ldr	r3, [pc, #488]	; (8001588 <HAL_RCC_OscConfig+0x338>)
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	4b79      	ldr	r3, [pc, #484]	; (8001588 <HAL_RCC_OscConfig+0x338>)
 80013a2:	2120      	movs	r1, #32
 80013a4:	430a      	orrs	r2, r1
 80013a6:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80013a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013aa:	2220      	movs	r2, #32
 80013ac:	4393      	bics	r3, r2
 80013ae:	627b      	str	r3, [r7, #36]	; 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013b0:	69fb      	ldr	r3, [r7, #28]
 80013b2:	2b04      	cmp	r3, #4
 80013b4:	d005      	beq.n	80013c2 <HAL_RCC_OscConfig+0x172>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	2b0c      	cmp	r3, #12
 80013ba:	d13e      	bne.n	800143a <HAL_RCC_OscConfig+0x1ea>
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d13b      	bne.n	800143a <HAL_RCC_OscConfig+0x1ea>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80013c2:	4b71      	ldr	r3, [pc, #452]	; (8001588 <HAL_RCC_OscConfig+0x338>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	2204      	movs	r2, #4
 80013c8:	4013      	ands	r3, r2
 80013ca:	d004      	beq.n	80013d6 <HAL_RCC_OscConfig+0x186>
 80013cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d101      	bne.n	80013d6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80013d2:	2301      	movs	r3, #1
 80013d4:	e2b2      	b.n	800193c <HAL_RCC_OscConfig+0x6ec>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013d6:	4b6c      	ldr	r3, [pc, #432]	; (8001588 <HAL_RCC_OscConfig+0x338>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	4a6e      	ldr	r2, [pc, #440]	; (8001594 <HAL_RCC_OscConfig+0x344>)
 80013dc:	4013      	ands	r3, r2
 80013de:	0019      	movs	r1, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	691b      	ldr	r3, [r3, #16]
 80013e4:	021a      	lsls	r2, r3, #8
 80013e6:	4b68      	ldr	r3, [pc, #416]	; (8001588 <HAL_RCC_OscConfig+0x338>)
 80013e8:	430a      	orrs	r2, r1
 80013ea:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80013ec:	4b66      	ldr	r3, [pc, #408]	; (8001588 <HAL_RCC_OscConfig+0x338>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	2209      	movs	r2, #9
 80013f2:	4393      	bics	r3, r2
 80013f4:	0019      	movs	r1, r3
 80013f6:	4b64      	ldr	r3, [pc, #400]	; (8001588 <HAL_RCC_OscConfig+0x338>)
 80013f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80013fa:	430a      	orrs	r2, r1
 80013fc:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80013fe:	f000 fbeb 	bl	8001bd8 <HAL_RCC_GetSysClockFreq>
 8001402:	0001      	movs	r1, r0
 8001404:	4b60      	ldr	r3, [pc, #384]	; (8001588 <HAL_RCC_OscConfig+0x338>)
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	091b      	lsrs	r3, r3, #4
 800140a:	220f      	movs	r2, #15
 800140c:	4013      	ands	r3, r2
 800140e:	4a62      	ldr	r2, [pc, #392]	; (8001598 <HAL_RCC_OscConfig+0x348>)
 8001410:	5cd3      	ldrb	r3, [r2, r3]
 8001412:	000a      	movs	r2, r1
 8001414:	40da      	lsrs	r2, r3
 8001416:	4b61      	ldr	r3, [pc, #388]	; (800159c <HAL_RCC_OscConfig+0x34c>)
 8001418:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 800141a:	4b61      	ldr	r3, [pc, #388]	; (80015a0 <HAL_RCC_OscConfig+0x350>)
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	2513      	movs	r5, #19
 8001420:	197c      	adds	r4, r7, r5
 8001422:	0018      	movs	r0, r3
 8001424:	f7ff fa94 	bl	8000950 <HAL_InitTick>
 8001428:	0003      	movs	r3, r0
 800142a:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 800142c:	197b      	adds	r3, r7, r5
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d046      	beq.n	80014c2 <HAL_RCC_OscConfig+0x272>
      {
        return status;
 8001434:	197b      	adds	r3, r7, r5
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	e280      	b.n	800193c <HAL_RCC_OscConfig+0x6ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 800143a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143c:	2b00      	cmp	r3, #0
 800143e:	d027      	beq.n	8001490 <HAL_RCC_OscConfig+0x240>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001440:	4b51      	ldr	r3, [pc, #324]	; (8001588 <HAL_RCC_OscConfig+0x338>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2209      	movs	r2, #9
 8001446:	4393      	bics	r3, r2
 8001448:	0019      	movs	r1, r3
 800144a:	4b4f      	ldr	r3, [pc, #316]	; (8001588 <HAL_RCC_OscConfig+0x338>)
 800144c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800144e:	430a      	orrs	r2, r1
 8001450:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001452:	f7ff fac3 	bl	80009dc <HAL_GetTick>
 8001456:	0003      	movs	r3, r0
 8001458:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800145a:	e008      	b.n	800146e <HAL_RCC_OscConfig+0x21e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800145c:	f7ff fabe 	bl	80009dc <HAL_GetTick>
 8001460:	0002      	movs	r2, r0
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	2b02      	cmp	r3, #2
 8001468:	d901      	bls.n	800146e <HAL_RCC_OscConfig+0x21e>
          {
            return HAL_TIMEOUT;
 800146a:	2303      	movs	r3, #3
 800146c:	e266      	b.n	800193c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800146e:	4b46      	ldr	r3, [pc, #280]	; (8001588 <HAL_RCC_OscConfig+0x338>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	2204      	movs	r2, #4
 8001474:	4013      	ands	r3, r2
 8001476:	d0f1      	beq.n	800145c <HAL_RCC_OscConfig+0x20c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001478:	4b43      	ldr	r3, [pc, #268]	; (8001588 <HAL_RCC_OscConfig+0x338>)
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	4a45      	ldr	r2, [pc, #276]	; (8001594 <HAL_RCC_OscConfig+0x344>)
 800147e:	4013      	ands	r3, r2
 8001480:	0019      	movs	r1, r3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	691b      	ldr	r3, [r3, #16]
 8001486:	021a      	lsls	r2, r3, #8
 8001488:	4b3f      	ldr	r3, [pc, #252]	; (8001588 <HAL_RCC_OscConfig+0x338>)
 800148a:	430a      	orrs	r2, r1
 800148c:	605a      	str	r2, [r3, #4]
 800148e:	e018      	b.n	80014c2 <HAL_RCC_OscConfig+0x272>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001490:	4b3d      	ldr	r3, [pc, #244]	; (8001588 <HAL_RCC_OscConfig+0x338>)
 8001492:	681a      	ldr	r2, [r3, #0]
 8001494:	4b3c      	ldr	r3, [pc, #240]	; (8001588 <HAL_RCC_OscConfig+0x338>)
 8001496:	2101      	movs	r1, #1
 8001498:	438a      	bics	r2, r1
 800149a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800149c:	f7ff fa9e 	bl	80009dc <HAL_GetTick>
 80014a0:	0003      	movs	r3, r0
 80014a2:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80014a4:	e008      	b.n	80014b8 <HAL_RCC_OscConfig+0x268>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80014a6:	f7ff fa99 	bl	80009dc <HAL_GetTick>
 80014aa:	0002      	movs	r2, r0
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d901      	bls.n	80014b8 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80014b4:	2303      	movs	r3, #3
 80014b6:	e241      	b.n	800193c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80014b8:	4b33      	ldr	r3, [pc, #204]	; (8001588 <HAL_RCC_OscConfig+0x338>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	2204      	movs	r2, #4
 80014be:	4013      	ands	r3, r2
 80014c0:	d1f1      	bne.n	80014a6 <HAL_RCC_OscConfig+0x256>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2210      	movs	r2, #16
 80014c8:	4013      	ands	r3, r2
 80014ca:	d100      	bne.n	80014ce <HAL_RCC_OscConfig+0x27e>
 80014cc:	e0a1      	b.n	8001612 <HAL_RCC_OscConfig+0x3c2>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d140      	bne.n	8001556 <HAL_RCC_OscConfig+0x306>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014d4:	4b2c      	ldr	r3, [pc, #176]	; (8001588 <HAL_RCC_OscConfig+0x338>)
 80014d6:	681a      	ldr	r2, [r3, #0]
 80014d8:	2380      	movs	r3, #128	; 0x80
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	4013      	ands	r3, r2
 80014de:	d005      	beq.n	80014ec <HAL_RCC_OscConfig+0x29c>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d101      	bne.n	80014ec <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80014e8:	2301      	movs	r3, #1
 80014ea:	e227      	b.n	800193c <HAL_RCC_OscConfig+0x6ec>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014ec:	4b26      	ldr	r3, [pc, #152]	; (8001588 <HAL_RCC_OscConfig+0x338>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	4a2c      	ldr	r2, [pc, #176]	; (80015a4 <HAL_RCC_OscConfig+0x354>)
 80014f2:	4013      	ands	r3, r2
 80014f4:	0019      	movs	r1, r3
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6a1a      	ldr	r2, [r3, #32]
 80014fa:	4b23      	ldr	r3, [pc, #140]	; (8001588 <HAL_RCC_OscConfig+0x338>)
 80014fc:	430a      	orrs	r2, r1
 80014fe:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001500:	4b21      	ldr	r3, [pc, #132]	; (8001588 <HAL_RCC_OscConfig+0x338>)
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	021b      	lsls	r3, r3, #8
 8001506:	0a19      	lsrs	r1, r3, #8
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	69db      	ldr	r3, [r3, #28]
 800150c:	061a      	lsls	r2, r3, #24
 800150e:	4b1e      	ldr	r3, [pc, #120]	; (8001588 <HAL_RCC_OscConfig+0x338>)
 8001510:	430a      	orrs	r2, r1
 8001512:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6a1b      	ldr	r3, [r3, #32]
 8001518:	0b5b      	lsrs	r3, r3, #13
 800151a:	3301      	adds	r3, #1
 800151c:	2280      	movs	r2, #128	; 0x80
 800151e:	0212      	lsls	r2, r2, #8
 8001520:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001522:	4b19      	ldr	r3, [pc, #100]	; (8001588 <HAL_RCC_OscConfig+0x338>)
 8001524:	68db      	ldr	r3, [r3, #12]
 8001526:	091b      	lsrs	r3, r3, #4
 8001528:	210f      	movs	r1, #15
 800152a:	400b      	ands	r3, r1
 800152c:	491a      	ldr	r1, [pc, #104]	; (8001598 <HAL_RCC_OscConfig+0x348>)
 800152e:	5ccb      	ldrb	r3, [r1, r3]
 8001530:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001532:	4b1a      	ldr	r3, [pc, #104]	; (800159c <HAL_RCC_OscConfig+0x34c>)
 8001534:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001536:	4b1a      	ldr	r3, [pc, #104]	; (80015a0 <HAL_RCC_OscConfig+0x350>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	2513      	movs	r5, #19
 800153c:	197c      	adds	r4, r7, r5
 800153e:	0018      	movs	r0, r3
 8001540:	f7ff fa06 	bl	8000950 <HAL_InitTick>
 8001544:	0003      	movs	r3, r0
 8001546:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001548:	197b      	adds	r3, r7, r5
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d060      	beq.n	8001612 <HAL_RCC_OscConfig+0x3c2>
        {
          return status;
 8001550:	197b      	adds	r3, r7, r5
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	e1f2      	b.n	800193c <HAL_RCC_OscConfig+0x6ec>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	699b      	ldr	r3, [r3, #24]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d03f      	beq.n	80015de <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800155e:	4b0a      	ldr	r3, [pc, #40]	; (8001588 <HAL_RCC_OscConfig+0x338>)
 8001560:	681a      	ldr	r2, [r3, #0]
 8001562:	4b09      	ldr	r3, [pc, #36]	; (8001588 <HAL_RCC_OscConfig+0x338>)
 8001564:	2180      	movs	r1, #128	; 0x80
 8001566:	0049      	lsls	r1, r1, #1
 8001568:	430a      	orrs	r2, r1
 800156a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800156c:	f7ff fa36 	bl	80009dc <HAL_GetTick>
 8001570:	0003      	movs	r3, r0
 8001572:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001574:	e018      	b.n	80015a8 <HAL_RCC_OscConfig+0x358>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001576:	f7ff fa31 	bl	80009dc <HAL_GetTick>
 800157a:	0002      	movs	r2, r0
 800157c:	697b      	ldr	r3, [r7, #20]
 800157e:	1ad3      	subs	r3, r2, r3
 8001580:	2b02      	cmp	r3, #2
 8001582:	d911      	bls.n	80015a8 <HAL_RCC_OscConfig+0x358>
          {
            return HAL_TIMEOUT;
 8001584:	2303      	movs	r3, #3
 8001586:	e1d9      	b.n	800193c <HAL_RCC_OscConfig+0x6ec>
 8001588:	40021000 	.word	0x40021000
 800158c:	fffeffff 	.word	0xfffeffff
 8001590:	fffbffff 	.word	0xfffbffff
 8001594:	ffffe0ff 	.word	0xffffe0ff
 8001598:	08002dc0 	.word	0x08002dc0
 800159c:	20000000 	.word	0x20000000
 80015a0:	20000004 	.word	0x20000004
 80015a4:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80015a8:	4bc9      	ldr	r3, [pc, #804]	; (80018d0 <HAL_RCC_OscConfig+0x680>)
 80015aa:	681a      	ldr	r2, [r3, #0]
 80015ac:	2380      	movs	r3, #128	; 0x80
 80015ae:	009b      	lsls	r3, r3, #2
 80015b0:	4013      	ands	r3, r2
 80015b2:	d0e0      	beq.n	8001576 <HAL_RCC_OscConfig+0x326>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015b4:	4bc6      	ldr	r3, [pc, #792]	; (80018d0 <HAL_RCC_OscConfig+0x680>)
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	4ac6      	ldr	r2, [pc, #792]	; (80018d4 <HAL_RCC_OscConfig+0x684>)
 80015ba:	4013      	ands	r3, r2
 80015bc:	0019      	movs	r1, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6a1a      	ldr	r2, [r3, #32]
 80015c2:	4bc3      	ldr	r3, [pc, #780]	; (80018d0 <HAL_RCC_OscConfig+0x680>)
 80015c4:	430a      	orrs	r2, r1
 80015c6:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015c8:	4bc1      	ldr	r3, [pc, #772]	; (80018d0 <HAL_RCC_OscConfig+0x680>)
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	021b      	lsls	r3, r3, #8
 80015ce:	0a19      	lsrs	r1, r3, #8
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	69db      	ldr	r3, [r3, #28]
 80015d4:	061a      	lsls	r2, r3, #24
 80015d6:	4bbe      	ldr	r3, [pc, #760]	; (80018d0 <HAL_RCC_OscConfig+0x680>)
 80015d8:	430a      	orrs	r2, r1
 80015da:	605a      	str	r2, [r3, #4]
 80015dc:	e019      	b.n	8001612 <HAL_RCC_OscConfig+0x3c2>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80015de:	4bbc      	ldr	r3, [pc, #752]	; (80018d0 <HAL_RCC_OscConfig+0x680>)
 80015e0:	681a      	ldr	r2, [r3, #0]
 80015e2:	4bbb      	ldr	r3, [pc, #748]	; (80018d0 <HAL_RCC_OscConfig+0x680>)
 80015e4:	49bc      	ldr	r1, [pc, #752]	; (80018d8 <HAL_RCC_OscConfig+0x688>)
 80015e6:	400a      	ands	r2, r1
 80015e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ea:	f7ff f9f7 	bl	80009dc <HAL_GetTick>
 80015ee:	0003      	movs	r3, r0
 80015f0:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80015f2:	e008      	b.n	8001606 <HAL_RCC_OscConfig+0x3b6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015f4:	f7ff f9f2 	bl	80009dc <HAL_GetTick>
 80015f8:	0002      	movs	r2, r0
 80015fa:	697b      	ldr	r3, [r7, #20]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x3b6>
          {
            return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e19a      	b.n	800193c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001606:	4bb2      	ldr	r3, [pc, #712]	; (80018d0 <HAL_RCC_OscConfig+0x680>)
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	2380      	movs	r3, #128	; 0x80
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	4013      	ands	r3, r2
 8001610:	d1f0      	bne.n	80015f4 <HAL_RCC_OscConfig+0x3a4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	2208      	movs	r2, #8
 8001618:	4013      	ands	r3, r2
 800161a:	d036      	beq.n	800168a <HAL_RCC_OscConfig+0x43a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	695b      	ldr	r3, [r3, #20]
 8001620:	2b00      	cmp	r3, #0
 8001622:	d019      	beq.n	8001658 <HAL_RCC_OscConfig+0x408>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001624:	4baa      	ldr	r3, [pc, #680]	; (80018d0 <HAL_RCC_OscConfig+0x680>)
 8001626:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001628:	4ba9      	ldr	r3, [pc, #676]	; (80018d0 <HAL_RCC_OscConfig+0x680>)
 800162a:	2101      	movs	r1, #1
 800162c:	430a      	orrs	r2, r1
 800162e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001630:	f7ff f9d4 	bl	80009dc <HAL_GetTick>
 8001634:	0003      	movs	r3, r0
 8001636:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001638:	e008      	b.n	800164c <HAL_RCC_OscConfig+0x3fc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800163a:	f7ff f9cf 	bl	80009dc <HAL_GetTick>
 800163e:	0002      	movs	r2, r0
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	1ad3      	subs	r3, r2, r3
 8001644:	2b02      	cmp	r3, #2
 8001646:	d901      	bls.n	800164c <HAL_RCC_OscConfig+0x3fc>
        {
          return HAL_TIMEOUT;
 8001648:	2303      	movs	r3, #3
 800164a:	e177      	b.n	800193c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800164c:	4ba0      	ldr	r3, [pc, #640]	; (80018d0 <HAL_RCC_OscConfig+0x680>)
 800164e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001650:	2202      	movs	r2, #2
 8001652:	4013      	ands	r3, r2
 8001654:	d0f1      	beq.n	800163a <HAL_RCC_OscConfig+0x3ea>
 8001656:	e018      	b.n	800168a <HAL_RCC_OscConfig+0x43a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001658:	4b9d      	ldr	r3, [pc, #628]	; (80018d0 <HAL_RCC_OscConfig+0x680>)
 800165a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800165c:	4b9c      	ldr	r3, [pc, #624]	; (80018d0 <HAL_RCC_OscConfig+0x680>)
 800165e:	2101      	movs	r1, #1
 8001660:	438a      	bics	r2, r1
 8001662:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001664:	f7ff f9ba 	bl	80009dc <HAL_GetTick>
 8001668:	0003      	movs	r3, r0
 800166a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800166c:	e008      	b.n	8001680 <HAL_RCC_OscConfig+0x430>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800166e:	f7ff f9b5 	bl	80009dc <HAL_GetTick>
 8001672:	0002      	movs	r2, r0
 8001674:	697b      	ldr	r3, [r7, #20]
 8001676:	1ad3      	subs	r3, r2, r3
 8001678:	2b02      	cmp	r3, #2
 800167a:	d901      	bls.n	8001680 <HAL_RCC_OscConfig+0x430>
        {
          return HAL_TIMEOUT;
 800167c:	2303      	movs	r3, #3
 800167e:	e15d      	b.n	800193c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001680:	4b93      	ldr	r3, [pc, #588]	; (80018d0 <HAL_RCC_OscConfig+0x680>)
 8001682:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001684:	2202      	movs	r2, #2
 8001686:	4013      	ands	r3, r2
 8001688:	d1f1      	bne.n	800166e <HAL_RCC_OscConfig+0x41e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	2204      	movs	r2, #4
 8001690:	4013      	ands	r3, r2
 8001692:	d100      	bne.n	8001696 <HAL_RCC_OscConfig+0x446>
 8001694:	e0ae      	b.n	80017f4 <HAL_RCC_OscConfig+0x5a4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001696:	2023      	movs	r0, #35	; 0x23
 8001698:	183b      	adds	r3, r7, r0
 800169a:	2200      	movs	r2, #0
 800169c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800169e:	4b8c      	ldr	r3, [pc, #560]	; (80018d0 <HAL_RCC_OscConfig+0x680>)
 80016a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80016a2:	2380      	movs	r3, #128	; 0x80
 80016a4:	055b      	lsls	r3, r3, #21
 80016a6:	4013      	ands	r3, r2
 80016a8:	d109      	bne.n	80016be <HAL_RCC_OscConfig+0x46e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016aa:	4b89      	ldr	r3, [pc, #548]	; (80018d0 <HAL_RCC_OscConfig+0x680>)
 80016ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80016ae:	4b88      	ldr	r3, [pc, #544]	; (80018d0 <HAL_RCC_OscConfig+0x680>)
 80016b0:	2180      	movs	r1, #128	; 0x80
 80016b2:	0549      	lsls	r1, r1, #21
 80016b4:	430a      	orrs	r2, r1
 80016b6:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 80016b8:	183b      	adds	r3, r7, r0
 80016ba:	2201      	movs	r2, #1
 80016bc:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016be:	4b87      	ldr	r3, [pc, #540]	; (80018dc <HAL_RCC_OscConfig+0x68c>)
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	2380      	movs	r3, #128	; 0x80
 80016c4:	005b      	lsls	r3, r3, #1
 80016c6:	4013      	ands	r3, r2
 80016c8:	d11a      	bne.n	8001700 <HAL_RCC_OscConfig+0x4b0>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016ca:	4b84      	ldr	r3, [pc, #528]	; (80018dc <HAL_RCC_OscConfig+0x68c>)
 80016cc:	681a      	ldr	r2, [r3, #0]
 80016ce:	4b83      	ldr	r3, [pc, #524]	; (80018dc <HAL_RCC_OscConfig+0x68c>)
 80016d0:	2180      	movs	r1, #128	; 0x80
 80016d2:	0049      	lsls	r1, r1, #1
 80016d4:	430a      	orrs	r2, r1
 80016d6:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016d8:	f7ff f980 	bl	80009dc <HAL_GetTick>
 80016dc:	0003      	movs	r3, r0
 80016de:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016e0:	e008      	b.n	80016f4 <HAL_RCC_OscConfig+0x4a4>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016e2:	f7ff f97b 	bl	80009dc <HAL_GetTick>
 80016e6:	0002      	movs	r2, r0
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	2b64      	cmp	r3, #100	; 0x64
 80016ee:	d901      	bls.n	80016f4 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 80016f0:	2303      	movs	r3, #3
 80016f2:	e123      	b.n	800193c <HAL_RCC_OscConfig+0x6ec>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016f4:	4b79      	ldr	r3, [pc, #484]	; (80018dc <HAL_RCC_OscConfig+0x68c>)
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	2380      	movs	r3, #128	; 0x80
 80016fa:	005b      	lsls	r3, r3, #1
 80016fc:	4013      	ands	r3, r2
 80016fe:	d0f0      	beq.n	80016e2 <HAL_RCC_OscConfig+0x492>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	689a      	ldr	r2, [r3, #8]
 8001704:	2380      	movs	r3, #128	; 0x80
 8001706:	005b      	lsls	r3, r3, #1
 8001708:	429a      	cmp	r2, r3
 800170a:	d107      	bne.n	800171c <HAL_RCC_OscConfig+0x4cc>
 800170c:	4b70      	ldr	r3, [pc, #448]	; (80018d0 <HAL_RCC_OscConfig+0x680>)
 800170e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001710:	4b6f      	ldr	r3, [pc, #444]	; (80018d0 <HAL_RCC_OscConfig+0x680>)
 8001712:	2180      	movs	r1, #128	; 0x80
 8001714:	0049      	lsls	r1, r1, #1
 8001716:	430a      	orrs	r2, r1
 8001718:	651a      	str	r2, [r3, #80]	; 0x50
 800171a:	e031      	b.n	8001780 <HAL_RCC_OscConfig+0x530>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	689b      	ldr	r3, [r3, #8]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d10c      	bne.n	800173e <HAL_RCC_OscConfig+0x4ee>
 8001724:	4b6a      	ldr	r3, [pc, #424]	; (80018d0 <HAL_RCC_OscConfig+0x680>)
 8001726:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001728:	4b69      	ldr	r3, [pc, #420]	; (80018d0 <HAL_RCC_OscConfig+0x680>)
 800172a:	496b      	ldr	r1, [pc, #428]	; (80018d8 <HAL_RCC_OscConfig+0x688>)
 800172c:	400a      	ands	r2, r1
 800172e:	651a      	str	r2, [r3, #80]	; 0x50
 8001730:	4b67      	ldr	r3, [pc, #412]	; (80018d0 <HAL_RCC_OscConfig+0x680>)
 8001732:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001734:	4b66      	ldr	r3, [pc, #408]	; (80018d0 <HAL_RCC_OscConfig+0x680>)
 8001736:	496a      	ldr	r1, [pc, #424]	; (80018e0 <HAL_RCC_OscConfig+0x690>)
 8001738:	400a      	ands	r2, r1
 800173a:	651a      	str	r2, [r3, #80]	; 0x50
 800173c:	e020      	b.n	8001780 <HAL_RCC_OscConfig+0x530>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	689a      	ldr	r2, [r3, #8]
 8001742:	23a0      	movs	r3, #160	; 0xa0
 8001744:	00db      	lsls	r3, r3, #3
 8001746:	429a      	cmp	r2, r3
 8001748:	d10e      	bne.n	8001768 <HAL_RCC_OscConfig+0x518>
 800174a:	4b61      	ldr	r3, [pc, #388]	; (80018d0 <HAL_RCC_OscConfig+0x680>)
 800174c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800174e:	4b60      	ldr	r3, [pc, #384]	; (80018d0 <HAL_RCC_OscConfig+0x680>)
 8001750:	2180      	movs	r1, #128	; 0x80
 8001752:	00c9      	lsls	r1, r1, #3
 8001754:	430a      	orrs	r2, r1
 8001756:	651a      	str	r2, [r3, #80]	; 0x50
 8001758:	4b5d      	ldr	r3, [pc, #372]	; (80018d0 <HAL_RCC_OscConfig+0x680>)
 800175a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800175c:	4b5c      	ldr	r3, [pc, #368]	; (80018d0 <HAL_RCC_OscConfig+0x680>)
 800175e:	2180      	movs	r1, #128	; 0x80
 8001760:	0049      	lsls	r1, r1, #1
 8001762:	430a      	orrs	r2, r1
 8001764:	651a      	str	r2, [r3, #80]	; 0x50
 8001766:	e00b      	b.n	8001780 <HAL_RCC_OscConfig+0x530>
 8001768:	4b59      	ldr	r3, [pc, #356]	; (80018d0 <HAL_RCC_OscConfig+0x680>)
 800176a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800176c:	4b58      	ldr	r3, [pc, #352]	; (80018d0 <HAL_RCC_OscConfig+0x680>)
 800176e:	495a      	ldr	r1, [pc, #360]	; (80018d8 <HAL_RCC_OscConfig+0x688>)
 8001770:	400a      	ands	r2, r1
 8001772:	651a      	str	r2, [r3, #80]	; 0x50
 8001774:	4b56      	ldr	r3, [pc, #344]	; (80018d0 <HAL_RCC_OscConfig+0x680>)
 8001776:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001778:	4b55      	ldr	r3, [pc, #340]	; (80018d0 <HAL_RCC_OscConfig+0x680>)
 800177a:	4959      	ldr	r1, [pc, #356]	; (80018e0 <HAL_RCC_OscConfig+0x690>)
 800177c:	400a      	ands	r2, r1
 800177e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	2b00      	cmp	r3, #0
 8001786:	d015      	beq.n	80017b4 <HAL_RCC_OscConfig+0x564>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001788:	f7ff f928 	bl	80009dc <HAL_GetTick>
 800178c:	0003      	movs	r3, r0
 800178e:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001790:	e009      	b.n	80017a6 <HAL_RCC_OscConfig+0x556>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001792:	f7ff f923 	bl	80009dc <HAL_GetTick>
 8001796:	0002      	movs	r2, r0
 8001798:	697b      	ldr	r3, [r7, #20]
 800179a:	1ad3      	subs	r3, r2, r3
 800179c:	4a51      	ldr	r2, [pc, #324]	; (80018e4 <HAL_RCC_OscConfig+0x694>)
 800179e:	4293      	cmp	r3, r2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_OscConfig+0x556>
        {
          return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e0ca      	b.n	800193c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80017a6:	4b4a      	ldr	r3, [pc, #296]	; (80018d0 <HAL_RCC_OscConfig+0x680>)
 80017a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017aa:	2380      	movs	r3, #128	; 0x80
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	4013      	ands	r3, r2
 80017b0:	d0ef      	beq.n	8001792 <HAL_RCC_OscConfig+0x542>
 80017b2:	e014      	b.n	80017de <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017b4:	f7ff f912 	bl	80009dc <HAL_GetTick>
 80017b8:	0003      	movs	r3, r0
 80017ba:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80017bc:	e009      	b.n	80017d2 <HAL_RCC_OscConfig+0x582>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017be:	f7ff f90d 	bl	80009dc <HAL_GetTick>
 80017c2:	0002      	movs	r2, r0
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	4a46      	ldr	r2, [pc, #280]	; (80018e4 <HAL_RCC_OscConfig+0x694>)
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d901      	bls.n	80017d2 <HAL_RCC_OscConfig+0x582>
        {
          return HAL_TIMEOUT;
 80017ce:	2303      	movs	r3, #3
 80017d0:	e0b4      	b.n	800193c <HAL_RCC_OscConfig+0x6ec>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80017d2:	4b3f      	ldr	r3, [pc, #252]	; (80018d0 <HAL_RCC_OscConfig+0x680>)
 80017d4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80017d6:	2380      	movs	r3, #128	; 0x80
 80017d8:	009b      	lsls	r3, r3, #2
 80017da:	4013      	ands	r3, r2
 80017dc:	d1ef      	bne.n	80017be <HAL_RCC_OscConfig+0x56e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80017de:	2323      	movs	r3, #35	; 0x23
 80017e0:	18fb      	adds	r3, r7, r3
 80017e2:	781b      	ldrb	r3, [r3, #0]
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d105      	bne.n	80017f4 <HAL_RCC_OscConfig+0x5a4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017e8:	4b39      	ldr	r3, [pc, #228]	; (80018d0 <HAL_RCC_OscConfig+0x680>)
 80017ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017ec:	4b38      	ldr	r3, [pc, #224]	; (80018d0 <HAL_RCC_OscConfig+0x680>)
 80017ee:	493e      	ldr	r1, [pc, #248]	; (80018e8 <HAL_RCC_OscConfig+0x698>)
 80017f0:	400a      	ands	r2, r1
 80017f2:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d100      	bne.n	80017fe <HAL_RCC_OscConfig+0x5ae>
 80017fc:	e09d      	b.n	800193a <HAL_RCC_OscConfig+0x6ea>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	2b0c      	cmp	r3, #12
 8001802:	d100      	bne.n	8001806 <HAL_RCC_OscConfig+0x5b6>
 8001804:	e076      	b.n	80018f4 <HAL_RCC_OscConfig+0x6a4>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800180a:	2b02      	cmp	r3, #2
 800180c:	d145      	bne.n	800189a <HAL_RCC_OscConfig+0x64a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800180e:	4b30      	ldr	r3, [pc, #192]	; (80018d0 <HAL_RCC_OscConfig+0x680>)
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	4b2f      	ldr	r3, [pc, #188]	; (80018d0 <HAL_RCC_OscConfig+0x680>)
 8001814:	4935      	ldr	r1, [pc, #212]	; (80018ec <HAL_RCC_OscConfig+0x69c>)
 8001816:	400a      	ands	r2, r1
 8001818:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800181a:	f7ff f8df 	bl	80009dc <HAL_GetTick>
 800181e:	0003      	movs	r3, r0
 8001820:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001822:	e008      	b.n	8001836 <HAL_RCC_OscConfig+0x5e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001824:	f7ff f8da 	bl	80009dc <HAL_GetTick>
 8001828:	0002      	movs	r2, r0
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	1ad3      	subs	r3, r2, r3
 800182e:	2b02      	cmp	r3, #2
 8001830:	d901      	bls.n	8001836 <HAL_RCC_OscConfig+0x5e6>
          {
            return HAL_TIMEOUT;
 8001832:	2303      	movs	r3, #3
 8001834:	e082      	b.n	800193c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001836:	4b26      	ldr	r3, [pc, #152]	; (80018d0 <HAL_RCC_OscConfig+0x680>)
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	2380      	movs	r3, #128	; 0x80
 800183c:	049b      	lsls	r3, r3, #18
 800183e:	4013      	ands	r3, r2
 8001840:	d1f0      	bne.n	8001824 <HAL_RCC_OscConfig+0x5d4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001842:	4b23      	ldr	r3, [pc, #140]	; (80018d0 <HAL_RCC_OscConfig+0x680>)
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	4a2a      	ldr	r2, [pc, #168]	; (80018f0 <HAL_RCC_OscConfig+0x6a0>)
 8001848:	4013      	ands	r3, r2
 800184a:	0019      	movs	r1, r3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001854:	431a      	orrs	r2, r3
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	431a      	orrs	r2, r3
 800185c:	4b1c      	ldr	r3, [pc, #112]	; (80018d0 <HAL_RCC_OscConfig+0x680>)
 800185e:	430a      	orrs	r2, r1
 8001860:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001862:	4b1b      	ldr	r3, [pc, #108]	; (80018d0 <HAL_RCC_OscConfig+0x680>)
 8001864:	681a      	ldr	r2, [r3, #0]
 8001866:	4b1a      	ldr	r3, [pc, #104]	; (80018d0 <HAL_RCC_OscConfig+0x680>)
 8001868:	2180      	movs	r1, #128	; 0x80
 800186a:	0449      	lsls	r1, r1, #17
 800186c:	430a      	orrs	r2, r1
 800186e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001870:	f7ff f8b4 	bl	80009dc <HAL_GetTick>
 8001874:	0003      	movs	r3, r0
 8001876:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001878:	e008      	b.n	800188c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800187a:	f7ff f8af 	bl	80009dc <HAL_GetTick>
 800187e:	0002      	movs	r2, r0
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	2b02      	cmp	r3, #2
 8001886:	d901      	bls.n	800188c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8001888:	2303      	movs	r3, #3
 800188a:	e057      	b.n	800193c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 800188c:	4b10      	ldr	r3, [pc, #64]	; (80018d0 <HAL_RCC_OscConfig+0x680>)
 800188e:	681a      	ldr	r2, [r3, #0]
 8001890:	2380      	movs	r3, #128	; 0x80
 8001892:	049b      	lsls	r3, r3, #18
 8001894:	4013      	ands	r3, r2
 8001896:	d0f0      	beq.n	800187a <HAL_RCC_OscConfig+0x62a>
 8001898:	e04f      	b.n	800193a <HAL_RCC_OscConfig+0x6ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800189a:	4b0d      	ldr	r3, [pc, #52]	; (80018d0 <HAL_RCC_OscConfig+0x680>)
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	4b0c      	ldr	r3, [pc, #48]	; (80018d0 <HAL_RCC_OscConfig+0x680>)
 80018a0:	4912      	ldr	r1, [pc, #72]	; (80018ec <HAL_RCC_OscConfig+0x69c>)
 80018a2:	400a      	ands	r2, r1
 80018a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a6:	f7ff f899 	bl	80009dc <HAL_GetTick>
 80018aa:	0003      	movs	r3, r0
 80018ac:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80018ae:	e008      	b.n	80018c2 <HAL_RCC_OscConfig+0x672>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018b0:	f7ff f894 	bl	80009dc <HAL_GetTick>
 80018b4:	0002      	movs	r2, r0
 80018b6:	697b      	ldr	r3, [r7, #20]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0x672>
          {
            return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e03c      	b.n	800193c <HAL_RCC_OscConfig+0x6ec>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 80018c2:	4b03      	ldr	r3, [pc, #12]	; (80018d0 <HAL_RCC_OscConfig+0x680>)
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	2380      	movs	r3, #128	; 0x80
 80018c8:	049b      	lsls	r3, r3, #18
 80018ca:	4013      	ands	r3, r2
 80018cc:	d1f0      	bne.n	80018b0 <HAL_RCC_OscConfig+0x660>
 80018ce:	e034      	b.n	800193a <HAL_RCC_OscConfig+0x6ea>
 80018d0:	40021000 	.word	0x40021000
 80018d4:	ffff1fff 	.word	0xffff1fff
 80018d8:	fffffeff 	.word	0xfffffeff
 80018dc:	40007000 	.word	0x40007000
 80018e0:	fffffbff 	.word	0xfffffbff
 80018e4:	00001388 	.word	0x00001388
 80018e8:	efffffff 	.word	0xefffffff
 80018ec:	feffffff 	.word	0xfeffffff
 80018f0:	ff02ffff 	.word	0xff02ffff
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f8:	2b01      	cmp	r3, #1
 80018fa:	d101      	bne.n	8001900 <HAL_RCC_OscConfig+0x6b0>
      {
        return HAL_ERROR;
 80018fc:	2301      	movs	r3, #1
 80018fe:	e01d      	b.n	800193c <HAL_RCC_OscConfig+0x6ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001900:	4b10      	ldr	r3, [pc, #64]	; (8001944 <HAL_RCC_OscConfig+0x6f4>)
 8001902:	68db      	ldr	r3, [r3, #12]
 8001904:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001906:	69ba      	ldr	r2, [r7, #24]
 8001908:	2380      	movs	r3, #128	; 0x80
 800190a:	025b      	lsls	r3, r3, #9
 800190c:	401a      	ands	r2, r3
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001912:	429a      	cmp	r2, r3
 8001914:	d10f      	bne.n	8001936 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	23f0      	movs	r3, #240	; 0xf0
 800191a:	039b      	lsls	r3, r3, #14
 800191c:	401a      	ands	r2, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001922:	429a      	cmp	r2, r3
 8001924:	d107      	bne.n	8001936 <HAL_RCC_OscConfig+0x6e6>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	23c0      	movs	r3, #192	; 0xc0
 800192a:	041b      	lsls	r3, r3, #16
 800192c:	401a      	ands	r2, r3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001932:	429a      	cmp	r2, r3
 8001934:	d001      	beq.n	800193a <HAL_RCC_OscConfig+0x6ea>
        {
          return HAL_ERROR;
 8001936:	2301      	movs	r3, #1
 8001938:	e000      	b.n	800193c <HAL_RCC_OscConfig+0x6ec>
        }
      }
    }
  }
  return HAL_OK;
 800193a:	2300      	movs	r3, #0
}
 800193c:	0018      	movs	r0, r3
 800193e:	46bd      	mov	sp, r7
 8001940:	b00a      	add	sp, #40	; 0x28
 8001942:	bdb0      	pop	{r4, r5, r7, pc}
 8001944:	40021000 	.word	0x40021000

08001948 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001948:	b5b0      	push	{r4, r5, r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d101      	bne.n	800195c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001958:	2301      	movs	r3, #1
 800195a:	e128      	b.n	8001bae <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800195c:	4b96      	ldr	r3, [pc, #600]	; (8001bb8 <HAL_RCC_ClockConfig+0x270>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	2201      	movs	r2, #1
 8001962:	4013      	ands	r3, r2
 8001964:	683a      	ldr	r2, [r7, #0]
 8001966:	429a      	cmp	r2, r3
 8001968:	d91e      	bls.n	80019a8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800196a:	4b93      	ldr	r3, [pc, #588]	; (8001bb8 <HAL_RCC_ClockConfig+0x270>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	2201      	movs	r2, #1
 8001970:	4393      	bics	r3, r2
 8001972:	0019      	movs	r1, r3
 8001974:	4b90      	ldr	r3, [pc, #576]	; (8001bb8 <HAL_RCC_ClockConfig+0x270>)
 8001976:	683a      	ldr	r2, [r7, #0]
 8001978:	430a      	orrs	r2, r1
 800197a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800197c:	f7ff f82e 	bl	80009dc <HAL_GetTick>
 8001980:	0003      	movs	r3, r0
 8001982:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001984:	e009      	b.n	800199a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001986:	f7ff f829 	bl	80009dc <HAL_GetTick>
 800198a:	0002      	movs	r2, r0
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	1ad3      	subs	r3, r2, r3
 8001990:	4a8a      	ldr	r2, [pc, #552]	; (8001bbc <HAL_RCC_ClockConfig+0x274>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d901      	bls.n	800199a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001996:	2303      	movs	r3, #3
 8001998:	e109      	b.n	8001bae <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800199a:	4b87      	ldr	r3, [pc, #540]	; (8001bb8 <HAL_RCC_ClockConfig+0x270>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2201      	movs	r2, #1
 80019a0:	4013      	ands	r3, r2
 80019a2:	683a      	ldr	r2, [r7, #0]
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d1ee      	bne.n	8001986 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	2202      	movs	r2, #2
 80019ae:	4013      	ands	r3, r2
 80019b0:	d009      	beq.n	80019c6 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019b2:	4b83      	ldr	r3, [pc, #524]	; (8001bc0 <HAL_RCC_ClockConfig+0x278>)
 80019b4:	68db      	ldr	r3, [r3, #12]
 80019b6:	22f0      	movs	r2, #240	; 0xf0
 80019b8:	4393      	bics	r3, r2
 80019ba:	0019      	movs	r1, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	689a      	ldr	r2, [r3, #8]
 80019c0:	4b7f      	ldr	r3, [pc, #508]	; (8001bc0 <HAL_RCC_ClockConfig+0x278>)
 80019c2:	430a      	orrs	r2, r1
 80019c4:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	2201      	movs	r2, #1
 80019cc:	4013      	ands	r3, r2
 80019ce:	d100      	bne.n	80019d2 <HAL_RCC_ClockConfig+0x8a>
 80019d0:	e089      	b.n	8001ae6 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d107      	bne.n	80019ea <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80019da:	4b79      	ldr	r3, [pc, #484]	; (8001bc0 <HAL_RCC_ClockConfig+0x278>)
 80019dc:	681a      	ldr	r2, [r3, #0]
 80019de:	2380      	movs	r3, #128	; 0x80
 80019e0:	029b      	lsls	r3, r3, #10
 80019e2:	4013      	ands	r3, r2
 80019e4:	d120      	bne.n	8001a28 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80019e6:	2301      	movs	r3, #1
 80019e8:	e0e1      	b.n	8001bae <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	2b03      	cmp	r3, #3
 80019f0:	d107      	bne.n	8001a02 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80019f2:	4b73      	ldr	r3, [pc, #460]	; (8001bc0 <HAL_RCC_ClockConfig+0x278>)
 80019f4:	681a      	ldr	r2, [r3, #0]
 80019f6:	2380      	movs	r3, #128	; 0x80
 80019f8:	049b      	lsls	r3, r3, #18
 80019fa:	4013      	ands	r3, r2
 80019fc:	d114      	bne.n	8001a28 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80019fe:	2301      	movs	r3, #1
 8001a00:	e0d5      	b.n	8001bae <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	685b      	ldr	r3, [r3, #4]
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d106      	bne.n	8001a18 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001a0a:	4b6d      	ldr	r3, [pc, #436]	; (8001bc0 <HAL_RCC_ClockConfig+0x278>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	2204      	movs	r2, #4
 8001a10:	4013      	ands	r3, r2
 8001a12:	d109      	bne.n	8001a28 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001a14:	2301      	movs	r3, #1
 8001a16:	e0ca      	b.n	8001bae <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001a18:	4b69      	ldr	r3, [pc, #420]	; (8001bc0 <HAL_RCC_ClockConfig+0x278>)
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	2380      	movs	r3, #128	; 0x80
 8001a1e:	009b      	lsls	r3, r3, #2
 8001a20:	4013      	ands	r3, r2
 8001a22:	d101      	bne.n	8001a28 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e0c2      	b.n	8001bae <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a28:	4b65      	ldr	r3, [pc, #404]	; (8001bc0 <HAL_RCC_ClockConfig+0x278>)
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	2203      	movs	r2, #3
 8001a2e:	4393      	bics	r3, r2
 8001a30:	0019      	movs	r1, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685a      	ldr	r2, [r3, #4]
 8001a36:	4b62      	ldr	r3, [pc, #392]	; (8001bc0 <HAL_RCC_ClockConfig+0x278>)
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a3c:	f7fe ffce 	bl	80009dc <HAL_GetTick>
 8001a40:	0003      	movs	r3, r0
 8001a42:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d111      	bne.n	8001a70 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a4c:	e009      	b.n	8001a62 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a4e:	f7fe ffc5 	bl	80009dc <HAL_GetTick>
 8001a52:	0002      	movs	r2, r0
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	1ad3      	subs	r3, r2, r3
 8001a58:	4a58      	ldr	r2, [pc, #352]	; (8001bbc <HAL_RCC_ClockConfig+0x274>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d901      	bls.n	8001a62 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8001a5e:	2303      	movs	r3, #3
 8001a60:	e0a5      	b.n	8001bae <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a62:	4b57      	ldr	r3, [pc, #348]	; (8001bc0 <HAL_RCC_ClockConfig+0x278>)
 8001a64:	68db      	ldr	r3, [r3, #12]
 8001a66:	220c      	movs	r2, #12
 8001a68:	4013      	ands	r3, r2
 8001a6a:	2b08      	cmp	r3, #8
 8001a6c:	d1ef      	bne.n	8001a4e <HAL_RCC_ClockConfig+0x106>
 8001a6e:	e03a      	b.n	8001ae6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	2b03      	cmp	r3, #3
 8001a76:	d111      	bne.n	8001a9c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a78:	e009      	b.n	8001a8e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a7a:	f7fe ffaf 	bl	80009dc <HAL_GetTick>
 8001a7e:	0002      	movs	r2, r0
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	4a4d      	ldr	r2, [pc, #308]	; (8001bbc <HAL_RCC_ClockConfig+0x274>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e08f      	b.n	8001bae <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a8e:	4b4c      	ldr	r3, [pc, #304]	; (8001bc0 <HAL_RCC_ClockConfig+0x278>)
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	220c      	movs	r2, #12
 8001a94:	4013      	ands	r3, r2
 8001a96:	2b0c      	cmp	r3, #12
 8001a98:	d1ef      	bne.n	8001a7a <HAL_RCC_ClockConfig+0x132>
 8001a9a:	e024      	b.n	8001ae6 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	2b01      	cmp	r3, #1
 8001aa2:	d11b      	bne.n	8001adc <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001aa4:	e009      	b.n	8001aba <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aa6:	f7fe ff99 	bl	80009dc <HAL_GetTick>
 8001aaa:	0002      	movs	r2, r0
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	4a42      	ldr	r2, [pc, #264]	; (8001bbc <HAL_RCC_ClockConfig+0x274>)
 8001ab2:	4293      	cmp	r3, r2
 8001ab4:	d901      	bls.n	8001aba <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8001ab6:	2303      	movs	r3, #3
 8001ab8:	e079      	b.n	8001bae <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001aba:	4b41      	ldr	r3, [pc, #260]	; (8001bc0 <HAL_RCC_ClockConfig+0x278>)
 8001abc:	68db      	ldr	r3, [r3, #12]
 8001abe:	220c      	movs	r2, #12
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	2b04      	cmp	r3, #4
 8001ac4:	d1ef      	bne.n	8001aa6 <HAL_RCC_ClockConfig+0x15e>
 8001ac6:	e00e      	b.n	8001ae6 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ac8:	f7fe ff88 	bl	80009dc <HAL_GetTick>
 8001acc:	0002      	movs	r2, r0
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	4a3a      	ldr	r2, [pc, #232]	; (8001bbc <HAL_RCC_ClockConfig+0x274>)
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d901      	bls.n	8001adc <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e068      	b.n	8001bae <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8001adc:	4b38      	ldr	r3, [pc, #224]	; (8001bc0 <HAL_RCC_ClockConfig+0x278>)
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	220c      	movs	r2, #12
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	d1f0      	bne.n	8001ac8 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ae6:	4b34      	ldr	r3, [pc, #208]	; (8001bb8 <HAL_RCC_ClockConfig+0x270>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	2201      	movs	r2, #1
 8001aec:	4013      	ands	r3, r2
 8001aee:	683a      	ldr	r2, [r7, #0]
 8001af0:	429a      	cmp	r2, r3
 8001af2:	d21e      	bcs.n	8001b32 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001af4:	4b30      	ldr	r3, [pc, #192]	; (8001bb8 <HAL_RCC_ClockConfig+0x270>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2201      	movs	r2, #1
 8001afa:	4393      	bics	r3, r2
 8001afc:	0019      	movs	r1, r3
 8001afe:	4b2e      	ldr	r3, [pc, #184]	; (8001bb8 <HAL_RCC_ClockConfig+0x270>)
 8001b00:	683a      	ldr	r2, [r7, #0]
 8001b02:	430a      	orrs	r2, r1
 8001b04:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001b06:	f7fe ff69 	bl	80009dc <HAL_GetTick>
 8001b0a:	0003      	movs	r3, r0
 8001b0c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b0e:	e009      	b.n	8001b24 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b10:	f7fe ff64 	bl	80009dc <HAL_GetTick>
 8001b14:	0002      	movs	r2, r0
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	1ad3      	subs	r3, r2, r3
 8001b1a:	4a28      	ldr	r2, [pc, #160]	; (8001bbc <HAL_RCC_ClockConfig+0x274>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d901      	bls.n	8001b24 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e044      	b.n	8001bae <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b24:	4b24      	ldr	r3, [pc, #144]	; (8001bb8 <HAL_RCC_ClockConfig+0x270>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	2201      	movs	r2, #1
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	683a      	ldr	r2, [r7, #0]
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d1ee      	bne.n	8001b10 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	2204      	movs	r2, #4
 8001b38:	4013      	ands	r3, r2
 8001b3a:	d009      	beq.n	8001b50 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b3c:	4b20      	ldr	r3, [pc, #128]	; (8001bc0 <HAL_RCC_ClockConfig+0x278>)
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	4a20      	ldr	r2, [pc, #128]	; (8001bc4 <HAL_RCC_ClockConfig+0x27c>)
 8001b42:	4013      	ands	r3, r2
 8001b44:	0019      	movs	r1, r3
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	68da      	ldr	r2, [r3, #12]
 8001b4a:	4b1d      	ldr	r3, [pc, #116]	; (8001bc0 <HAL_RCC_ClockConfig+0x278>)
 8001b4c:	430a      	orrs	r2, r1
 8001b4e:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2208      	movs	r2, #8
 8001b56:	4013      	ands	r3, r2
 8001b58:	d00a      	beq.n	8001b70 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001b5a:	4b19      	ldr	r3, [pc, #100]	; (8001bc0 <HAL_RCC_ClockConfig+0x278>)
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	4a1a      	ldr	r2, [pc, #104]	; (8001bc8 <HAL_RCC_ClockConfig+0x280>)
 8001b60:	4013      	ands	r3, r2
 8001b62:	0019      	movs	r1, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	691b      	ldr	r3, [r3, #16]
 8001b68:	00da      	lsls	r2, r3, #3
 8001b6a:	4b15      	ldr	r3, [pc, #84]	; (8001bc0 <HAL_RCC_ClockConfig+0x278>)
 8001b6c:	430a      	orrs	r2, r1
 8001b6e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001b70:	f000 f832 	bl	8001bd8 <HAL_RCC_GetSysClockFreq>
 8001b74:	0001      	movs	r1, r0
 8001b76:	4b12      	ldr	r3, [pc, #72]	; (8001bc0 <HAL_RCC_ClockConfig+0x278>)
 8001b78:	68db      	ldr	r3, [r3, #12]
 8001b7a:	091b      	lsrs	r3, r3, #4
 8001b7c:	220f      	movs	r2, #15
 8001b7e:	4013      	ands	r3, r2
 8001b80:	4a12      	ldr	r2, [pc, #72]	; (8001bcc <HAL_RCC_ClockConfig+0x284>)
 8001b82:	5cd3      	ldrb	r3, [r2, r3]
 8001b84:	000a      	movs	r2, r1
 8001b86:	40da      	lsrs	r2, r3
 8001b88:	4b11      	ldr	r3, [pc, #68]	; (8001bd0 <HAL_RCC_ClockConfig+0x288>)
 8001b8a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b8c:	4b11      	ldr	r3, [pc, #68]	; (8001bd4 <HAL_RCC_ClockConfig+0x28c>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	250b      	movs	r5, #11
 8001b92:	197c      	adds	r4, r7, r5
 8001b94:	0018      	movs	r0, r3
 8001b96:	f7fe fedb 	bl	8000950 <HAL_InitTick>
 8001b9a:	0003      	movs	r3, r0
 8001b9c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 8001b9e:	197b      	adds	r3, r7, r5
 8001ba0:	781b      	ldrb	r3, [r3, #0]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d002      	beq.n	8001bac <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8001ba6:	197b      	adds	r3, r7, r5
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	e000      	b.n	8001bae <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 8001bac:	2300      	movs	r3, #0
}
 8001bae:	0018      	movs	r0, r3
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	b004      	add	sp, #16
 8001bb4:	bdb0      	pop	{r4, r5, r7, pc}
 8001bb6:	46c0      	nop			; (mov r8, r8)
 8001bb8:	40022000 	.word	0x40022000
 8001bbc:	00001388 	.word	0x00001388
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	fffff8ff 	.word	0xfffff8ff
 8001bc8:	ffffc7ff 	.word	0xffffc7ff
 8001bcc:	08002dc0 	.word	0x08002dc0
 8001bd0:	20000000 	.word	0x20000000
 8001bd4:	20000004 	.word	0x20000004

08001bd8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001bd8:	b5b0      	push	{r4, r5, r7, lr}
 8001bda:	b08e      	sub	sp, #56	; 0x38
 8001bdc:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 8001bde:	4b4c      	ldr	r3, [pc, #304]	; (8001d10 <HAL_RCC_GetSysClockFreq+0x138>)
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001be4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001be6:	230c      	movs	r3, #12
 8001be8:	4013      	ands	r3, r2
 8001bea:	2b0c      	cmp	r3, #12
 8001bec:	d014      	beq.n	8001c18 <HAL_RCC_GetSysClockFreq+0x40>
 8001bee:	d900      	bls.n	8001bf2 <HAL_RCC_GetSysClockFreq+0x1a>
 8001bf0:	e07b      	b.n	8001cea <HAL_RCC_GetSysClockFreq+0x112>
 8001bf2:	2b04      	cmp	r3, #4
 8001bf4:	d002      	beq.n	8001bfc <HAL_RCC_GetSysClockFreq+0x24>
 8001bf6:	2b08      	cmp	r3, #8
 8001bf8:	d00b      	beq.n	8001c12 <HAL_RCC_GetSysClockFreq+0x3a>
 8001bfa:	e076      	b.n	8001cea <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001bfc:	4b44      	ldr	r3, [pc, #272]	; (8001d10 <HAL_RCC_GetSysClockFreq+0x138>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	2210      	movs	r2, #16
 8001c02:	4013      	ands	r3, r2
 8001c04:	d002      	beq.n	8001c0c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8001c06:	4b43      	ldr	r3, [pc, #268]	; (8001d14 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001c08:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8001c0a:	e07c      	b.n	8001d06 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8001c0c:	4b42      	ldr	r3, [pc, #264]	; (8001d18 <HAL_RCC_GetSysClockFreq+0x140>)
 8001c0e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c10:	e079      	b.n	8001d06 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c12:	4b42      	ldr	r3, [pc, #264]	; (8001d1c <HAL_RCC_GetSysClockFreq+0x144>)
 8001c14:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001c16:	e076      	b.n	8001d06 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8001c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c1a:	0c9a      	lsrs	r2, r3, #18
 8001c1c:	230f      	movs	r3, #15
 8001c1e:	401a      	ands	r2, r3
 8001c20:	4b3f      	ldr	r3, [pc, #252]	; (8001d20 <HAL_RCC_GetSysClockFreq+0x148>)
 8001c22:	5c9b      	ldrb	r3, [r3, r2]
 8001c24:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8001c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c28:	0d9a      	lsrs	r2, r3, #22
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	3301      	adds	r3, #1
 8001c30:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c32:	4b37      	ldr	r3, [pc, #220]	; (8001d10 <HAL_RCC_GetSysClockFreq+0x138>)
 8001c34:	68da      	ldr	r2, [r3, #12]
 8001c36:	2380      	movs	r3, #128	; 0x80
 8001c38:	025b      	lsls	r3, r3, #9
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	d01a      	beq.n	8001c74 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c40:	61bb      	str	r3, [r7, #24]
 8001c42:	2300      	movs	r3, #0
 8001c44:	61fb      	str	r3, [r7, #28]
 8001c46:	4a35      	ldr	r2, [pc, #212]	; (8001d1c <HAL_RCC_GetSysClockFreq+0x144>)
 8001c48:	2300      	movs	r3, #0
 8001c4a:	69b8      	ldr	r0, [r7, #24]
 8001c4c:	69f9      	ldr	r1, [r7, #28]
 8001c4e:	f7fe fb07 	bl	8000260 <__aeabi_lmul>
 8001c52:	0002      	movs	r2, r0
 8001c54:	000b      	movs	r3, r1
 8001c56:	0010      	movs	r0, r2
 8001c58:	0019      	movs	r1, r3
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c5c:	613b      	str	r3, [r7, #16]
 8001c5e:	2300      	movs	r3, #0
 8001c60:	617b      	str	r3, [r7, #20]
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	f7fe fadb 	bl	8000220 <__aeabi_uldivmod>
 8001c6a:	0002      	movs	r2, r0
 8001c6c:	000b      	movs	r3, r1
 8001c6e:	0013      	movs	r3, r2
 8001c70:	637b      	str	r3, [r7, #52]	; 0x34
 8001c72:	e037      	b.n	8001ce4 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8001c74:	4b26      	ldr	r3, [pc, #152]	; (8001d10 <HAL_RCC_GetSysClockFreq+0x138>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	2210      	movs	r2, #16
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	d01a      	beq.n	8001cb4 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8001c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c80:	60bb      	str	r3, [r7, #8]
 8001c82:	2300      	movs	r3, #0
 8001c84:	60fb      	str	r3, [r7, #12]
 8001c86:	4a23      	ldr	r2, [pc, #140]	; (8001d14 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001c88:	2300      	movs	r3, #0
 8001c8a:	68b8      	ldr	r0, [r7, #8]
 8001c8c:	68f9      	ldr	r1, [r7, #12]
 8001c8e:	f7fe fae7 	bl	8000260 <__aeabi_lmul>
 8001c92:	0002      	movs	r2, r0
 8001c94:	000b      	movs	r3, r1
 8001c96:	0010      	movs	r0, r2
 8001c98:	0019      	movs	r1, r3
 8001c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9c:	603b      	str	r3, [r7, #0]
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	607b      	str	r3, [r7, #4]
 8001ca2:	683a      	ldr	r2, [r7, #0]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	f7fe fabb 	bl	8000220 <__aeabi_uldivmod>
 8001caa:	0002      	movs	r2, r0
 8001cac:	000b      	movs	r3, r1
 8001cae:	0013      	movs	r3, r2
 8001cb0:	637b      	str	r3, [r7, #52]	; 0x34
 8001cb2:	e017      	b.n	8001ce4 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cb6:	0018      	movs	r0, r3
 8001cb8:	2300      	movs	r3, #0
 8001cba:	0019      	movs	r1, r3
 8001cbc:	4a16      	ldr	r2, [pc, #88]	; (8001d18 <HAL_RCC_GetSysClockFreq+0x140>)
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	f7fe face 	bl	8000260 <__aeabi_lmul>
 8001cc4:	0002      	movs	r2, r0
 8001cc6:	000b      	movs	r3, r1
 8001cc8:	0010      	movs	r0, r2
 8001cca:	0019      	movs	r1, r3
 8001ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cce:	001c      	movs	r4, r3
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	001d      	movs	r5, r3
 8001cd4:	0022      	movs	r2, r4
 8001cd6:	002b      	movs	r3, r5
 8001cd8:	f7fe faa2 	bl	8000220 <__aeabi_uldivmod>
 8001cdc:	0002      	movs	r2, r0
 8001cde:	000b      	movs	r3, r1
 8001ce0:	0013      	movs	r3, r2
 8001ce2:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8001ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ce6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001ce8:	e00d      	b.n	8001d06 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8001cea:	4b09      	ldr	r3, [pc, #36]	; (8001d10 <HAL_RCC_GetSysClockFreq+0x138>)
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	0b5b      	lsrs	r3, r3, #13
 8001cf0:	2207      	movs	r2, #7
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8001cf6:	6a3b      	ldr	r3, [r7, #32]
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	2280      	movs	r2, #128	; 0x80
 8001cfc:	0212      	lsls	r2, r2, #8
 8001cfe:	409a      	lsls	r2, r3
 8001d00:	0013      	movs	r3, r2
 8001d02:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d04:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001d08:	0018      	movs	r0, r3
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	b00e      	add	sp, #56	; 0x38
 8001d0e:	bdb0      	pop	{r4, r5, r7, pc}
 8001d10:	40021000 	.word	0x40021000
 8001d14:	003d0900 	.word	0x003d0900
 8001d18:	00f42400 	.word	0x00f42400
 8001d1c:	007a1200 	.word	0x007a1200
 8001d20:	08002dd8 	.word	0x08002dd8

08001d24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d28:	4b02      	ldr	r3, [pc, #8]	; (8001d34 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
}
 8001d2c:	0018      	movs	r0, r3
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	46c0      	nop			; (mov r8, r8)
 8001d34:	20000000 	.word	0x20000000

08001d38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d3c:	f7ff fff2 	bl	8001d24 <HAL_RCC_GetHCLKFreq>
 8001d40:	0001      	movs	r1, r0
 8001d42:	4b06      	ldr	r3, [pc, #24]	; (8001d5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d44:	68db      	ldr	r3, [r3, #12]
 8001d46:	0a1b      	lsrs	r3, r3, #8
 8001d48:	2207      	movs	r2, #7
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	4a04      	ldr	r2, [pc, #16]	; (8001d60 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d4e:	5cd3      	ldrb	r3, [r2, r3]
 8001d50:	40d9      	lsrs	r1, r3
 8001d52:	000b      	movs	r3, r1
}
 8001d54:	0018      	movs	r0, r3
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	46c0      	nop			; (mov r8, r8)
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	08002dd0 	.word	0x08002dd0

08001d64 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d68:	f7ff ffdc 	bl	8001d24 <HAL_RCC_GetHCLKFreq>
 8001d6c:	0001      	movs	r1, r0
 8001d6e:	4b06      	ldr	r3, [pc, #24]	; (8001d88 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d70:	68db      	ldr	r3, [r3, #12]
 8001d72:	0adb      	lsrs	r3, r3, #11
 8001d74:	2207      	movs	r2, #7
 8001d76:	4013      	ands	r3, r2
 8001d78:	4a04      	ldr	r2, [pc, #16]	; (8001d8c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d7a:	5cd3      	ldrb	r3, [r2, r3]
 8001d7c:	40d9      	lsrs	r1, r3
 8001d7e:	000b      	movs	r3, r1
}
 8001d80:	0018      	movs	r0, r3
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	46c0      	nop			; (mov r8, r8)
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	08002dd0 	.word	0x08002dd0

08001d90 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b086      	sub	sp, #24
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8001d98:	2017      	movs	r0, #23
 8001d9a:	183b      	adds	r3, r7, r0
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2220      	movs	r2, #32
 8001da6:	4013      	ands	r3, r2
 8001da8:	d100      	bne.n	8001dac <HAL_RCCEx_PeriphCLKConfig+0x1c>
 8001daa:	e0c2      	b.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001dac:	4b81      	ldr	r3, [pc, #516]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001dae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001db0:	2380      	movs	r3, #128	; 0x80
 8001db2:	055b      	lsls	r3, r3, #21
 8001db4:	4013      	ands	r3, r2
 8001db6:	d109      	bne.n	8001dcc <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001db8:	4b7e      	ldr	r3, [pc, #504]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001dba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001dbc:	4b7d      	ldr	r3, [pc, #500]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001dbe:	2180      	movs	r1, #128	; 0x80
 8001dc0:	0549      	lsls	r1, r1, #21
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001dc6:	183b      	adds	r3, r7, r0
 8001dc8:	2201      	movs	r2, #1
 8001dca:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dcc:	4b7a      	ldr	r3, [pc, #488]	; (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	2380      	movs	r3, #128	; 0x80
 8001dd2:	005b      	lsls	r3, r3, #1
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	d11a      	bne.n	8001e0e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001dd8:	4b77      	ldr	r3, [pc, #476]	; (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	4b76      	ldr	r3, [pc, #472]	; (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001dde:	2180      	movs	r1, #128	; 0x80
 8001de0:	0049      	lsls	r1, r1, #1
 8001de2:	430a      	orrs	r2, r1
 8001de4:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001de6:	f7fe fdf9 	bl	80009dc <HAL_GetTick>
 8001dea:	0003      	movs	r3, r0
 8001dec:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001dee:	e008      	b.n	8001e02 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001df0:	f7fe fdf4 	bl	80009dc <HAL_GetTick>
 8001df4:	0002      	movs	r2, r0
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	1ad3      	subs	r3, r2, r3
 8001dfa:	2b64      	cmp	r3, #100	; 0x64
 8001dfc:	d901      	bls.n	8001e02 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 8001dfe:	2303      	movs	r3, #3
 8001e00:	e0d4      	b.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x21c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001e02:	4b6d      	ldr	r3, [pc, #436]	; (8001fb8 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	2380      	movs	r3, #128	; 0x80
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	d0f0      	beq.n	8001df0 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8001e0e:	4b69      	ldr	r3, [pc, #420]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	23c0      	movs	r3, #192	; 0xc0
 8001e14:	039b      	lsls	r3, r3, #14
 8001e16:	4013      	ands	r3, r2
 8001e18:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685a      	ldr	r2, [r3, #4]
 8001e1e:	23c0      	movs	r3, #192	; 0xc0
 8001e20:	039b      	lsls	r3, r3, #14
 8001e22:	4013      	ands	r3, r2
 8001e24:	68fa      	ldr	r2, [r7, #12]
 8001e26:	429a      	cmp	r2, r3
 8001e28:	d013      	beq.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685a      	ldr	r2, [r3, #4]
 8001e2e:	23c0      	movs	r3, #192	; 0xc0
 8001e30:	029b      	lsls	r3, r3, #10
 8001e32:	401a      	ands	r2, r3
 8001e34:	23c0      	movs	r3, #192	; 0xc0
 8001e36:	029b      	lsls	r3, r3, #10
 8001e38:	429a      	cmp	r2, r3
 8001e3a:	d10a      	bne.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8001e3c:	4b5d      	ldr	r3, [pc, #372]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001e3e:	681a      	ldr	r2, [r3, #0]
 8001e40:	2380      	movs	r3, #128	; 0x80
 8001e42:	029b      	lsls	r3, r3, #10
 8001e44:	401a      	ands	r2, r3
 8001e46:	2380      	movs	r3, #128	; 0x80
 8001e48:	029b      	lsls	r3, r3, #10
 8001e4a:	429a      	cmp	r2, r3
 8001e4c:	d101      	bne.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e0ac      	b.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x21c>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8001e52:	4b58      	ldr	r3, [pc, #352]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001e54:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e56:	23c0      	movs	r3, #192	; 0xc0
 8001e58:	029b      	lsls	r3, r3, #10
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d03b      	beq.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	685a      	ldr	r2, [r3, #4]
 8001e68:	23c0      	movs	r3, #192	; 0xc0
 8001e6a:	029b      	lsls	r3, r3, #10
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	68fa      	ldr	r2, [r7, #12]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d033      	beq.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	2220      	movs	r2, #32
 8001e7a:	4013      	ands	r3, r2
 8001e7c:	d02e      	beq.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8001e7e:	4b4d      	ldr	r3, [pc, #308]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001e80:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e82:	4a4e      	ldr	r2, [pc, #312]	; (8001fbc <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8001e84:	4013      	ands	r3, r2
 8001e86:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001e88:	4b4a      	ldr	r3, [pc, #296]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001e8a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e8c:	4b49      	ldr	r3, [pc, #292]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001e8e:	2180      	movs	r1, #128	; 0x80
 8001e90:	0309      	lsls	r1, r1, #12
 8001e92:	430a      	orrs	r2, r1
 8001e94:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001e96:	4b47      	ldr	r3, [pc, #284]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001e98:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e9a:	4b46      	ldr	r3, [pc, #280]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001e9c:	4948      	ldr	r1, [pc, #288]	; (8001fc0 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8001e9e:	400a      	ands	r2, r1
 8001ea0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8001ea2:	4b44      	ldr	r3, [pc, #272]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001ea4:	68fa      	ldr	r2, [r7, #12]
 8001ea6:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8001ea8:	68fa      	ldr	r2, [r7, #12]
 8001eaa:	2380      	movs	r3, #128	; 0x80
 8001eac:	005b      	lsls	r3, r3, #1
 8001eae:	4013      	ands	r3, r2
 8001eb0:	d014      	beq.n	8001edc <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eb2:	f7fe fd93 	bl	80009dc <HAL_GetTick>
 8001eb6:	0003      	movs	r3, r0
 8001eb8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001eba:	e009      	b.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ebc:	f7fe fd8e 	bl	80009dc <HAL_GetTick>
 8001ec0:	0002      	movs	r2, r0
 8001ec2:	693b      	ldr	r3, [r7, #16]
 8001ec4:	1ad3      	subs	r3, r2, r3
 8001ec6:	4a3f      	ldr	r2, [pc, #252]	; (8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x234>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d901      	bls.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 8001ecc:	2303      	movs	r3, #3
 8001ece:	e06d      	b.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x21c>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001ed0:	4b38      	ldr	r3, [pc, #224]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001ed2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001ed4:	2380      	movs	r3, #128	; 0x80
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	4013      	ands	r3, r2
 8001eda:	d0ef      	beq.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685a      	ldr	r2, [r3, #4]
 8001ee0:	23c0      	movs	r3, #192	; 0xc0
 8001ee2:	029b      	lsls	r3, r3, #10
 8001ee4:	401a      	ands	r2, r3
 8001ee6:	23c0      	movs	r3, #192	; 0xc0
 8001ee8:	029b      	lsls	r3, r3, #10
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d10c      	bne.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0x178>
 8001eee:	4b31      	ldr	r3, [pc, #196]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4a35      	ldr	r2, [pc, #212]	; (8001fc8 <HAL_RCCEx_PeriphCLKConfig+0x238>)
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	0019      	movs	r1, r3
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685a      	ldr	r2, [r3, #4]
 8001efc:	23c0      	movs	r3, #192	; 0xc0
 8001efe:	039b      	lsls	r3, r3, #14
 8001f00:	401a      	ands	r2, r3
 8001f02:	4b2c      	ldr	r3, [pc, #176]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001f04:	430a      	orrs	r2, r1
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	4b2a      	ldr	r3, [pc, #168]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001f0a:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685a      	ldr	r2, [r3, #4]
 8001f10:	23c0      	movs	r3, #192	; 0xc0
 8001f12:	029b      	lsls	r3, r3, #10
 8001f14:	401a      	ands	r2, r3
 8001f16:	4b27      	ldr	r3, [pc, #156]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001f18:	430a      	orrs	r2, r1
 8001f1a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001f1c:	2317      	movs	r3, #23
 8001f1e:	18fb      	adds	r3, r7, r3
 8001f20:	781b      	ldrb	r3, [r3, #0]
 8001f22:	2b01      	cmp	r3, #1
 8001f24:	d105      	bne.n	8001f32 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001f26:	4b23      	ldr	r3, [pc, #140]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001f28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001f2a:	4b22      	ldr	r3, [pc, #136]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001f2c:	4927      	ldr	r1, [pc, #156]	; (8001fcc <HAL_RCCEx_PeriphCLKConfig+0x23c>)
 8001f2e:	400a      	ands	r2, r1
 8001f30:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	2202      	movs	r2, #2
 8001f38:	4013      	ands	r3, r2
 8001f3a:	d009      	beq.n	8001f50 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001f3c:	4b1d      	ldr	r3, [pc, #116]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001f3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f40:	220c      	movs	r2, #12
 8001f42:	4393      	bics	r3, r2
 8001f44:	0019      	movs	r1, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	689a      	ldr	r2, [r3, #8]
 8001f4a:	4b1a      	ldr	r3, [pc, #104]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001f4c:	430a      	orrs	r2, r1
 8001f4e:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	2204      	movs	r2, #4
 8001f56:	4013      	ands	r3, r2
 8001f58:	d009      	beq.n	8001f6e <HAL_RCCEx_PeriphCLKConfig+0x1de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001f5a:	4b16      	ldr	r3, [pc, #88]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001f5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f5e:	4a1c      	ldr	r2, [pc, #112]	; (8001fd0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8001f60:	4013      	ands	r3, r2
 8001f62:	0019      	movs	r1, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	68da      	ldr	r2, [r3, #12]
 8001f68:	4b12      	ldr	r3, [pc, #72]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	2208      	movs	r2, #8
 8001f74:	4013      	ands	r3, r2
 8001f76:	d009      	beq.n	8001f8c <HAL_RCCEx_PeriphCLKConfig+0x1fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f78:	4b0e      	ldr	r3, [pc, #56]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001f7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f7c:	4a15      	ldr	r2, [pc, #84]	; (8001fd4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8001f7e:	4013      	ands	r3, r2
 8001f80:	0019      	movs	r1, r3
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	691a      	ldr	r2, [r3, #16]
 8001f86:	4b0b      	ldr	r3, [pc, #44]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001f88:	430a      	orrs	r2, r1
 8001f8a:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	2280      	movs	r2, #128	; 0x80
 8001f92:	4013      	ands	r3, r2
 8001f94:	d009      	beq.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 8001f96:	4b07      	ldr	r3, [pc, #28]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f9a:	4a0f      	ldr	r2, [pc, #60]	; (8001fd8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	0019      	movs	r1, r3
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	695a      	ldr	r2, [r3, #20]
 8001fa4:	4b03      	ldr	r3, [pc, #12]	; (8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8001faa:	2300      	movs	r3, #0
}
 8001fac:	0018      	movs	r0, r3
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	b006      	add	sp, #24
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	40007000 	.word	0x40007000
 8001fbc:	fffcffff 	.word	0xfffcffff
 8001fc0:	fff7ffff 	.word	0xfff7ffff
 8001fc4:	00001388 	.word	0x00001388
 8001fc8:	ffcfffff 	.word	0xffcfffff
 8001fcc:	efffffff 	.word	0xefffffff
 8001fd0:	fffff3ff 	.word	0xfffff3ff
 8001fd4:	ffffcfff 	.word	0xffffcfff
 8001fd8:	fff3ffff 	.word	0xfff3ffff

08001fdc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d101      	bne.n	8001fee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e044      	b.n	8002078 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d107      	bne.n	8002006 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	2274      	movs	r2, #116	; 0x74
 8001ffa:	2100      	movs	r1, #0
 8001ffc:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	0018      	movs	r0, r3
 8002002:	f7fe fbdd 	bl	80007c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2224      	movs	r2, #36	; 0x24
 800200a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2101      	movs	r1, #1
 8002018:	438a      	bics	r2, r1
 800201a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	0018      	movs	r0, r3
 8002020:	f000 fa50 	bl	80024c4 <UART_SetConfig>
 8002024:	0003      	movs	r3, r0
 8002026:	2b01      	cmp	r3, #1
 8002028:	d101      	bne.n	800202e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e024      	b.n	8002078 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002032:	2b00      	cmp	r3, #0
 8002034:	d003      	beq.n	800203e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	0018      	movs	r0, r3
 800203a:	f000 fca5 	bl	8002988 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	685a      	ldr	r2, [r3, #4]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	490d      	ldr	r1, [pc, #52]	; (8002080 <HAL_UART_Init+0xa4>)
 800204a:	400a      	ands	r2, r1
 800204c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	689a      	ldr	r2, [r3, #8]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	212a      	movs	r1, #42	; 0x2a
 800205a:	438a      	bics	r2, r1
 800205c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	681a      	ldr	r2, [r3, #0]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	2101      	movs	r1, #1
 800206a:	430a      	orrs	r2, r1
 800206c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	0018      	movs	r0, r3
 8002072:	f000 fd3d 	bl	8002af0 <UART_CheckIdleState>
 8002076:	0003      	movs	r3, r0
}
 8002078:	0018      	movs	r0, r3
 800207a:	46bd      	mov	sp, r7
 800207c:	b002      	add	sp, #8
 800207e:	bd80      	pop	{r7, pc}
 8002080:	ffffb7ff 	.word	0xffffb7ff

08002084 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b088      	sub	sp, #32
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	69db      	ldr	r3, [r3, #28]
 8002092:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80020a4:	69fb      	ldr	r3, [r7, #28]
 80020a6:	4ab5      	ldr	r2, [pc, #724]	; (800237c <HAL_UART_IRQHandler+0x2f8>)
 80020a8:	4013      	ands	r3, r2
 80020aa:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d112      	bne.n	80020d8 <HAL_UART_IRQHandler+0x54>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	2220      	movs	r2, #32
 80020b6:	4013      	ands	r3, r2
 80020b8:	d00e      	beq.n	80020d8 <HAL_UART_IRQHandler+0x54>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80020ba:	69bb      	ldr	r3, [r7, #24]
 80020bc:	2220      	movs	r2, #32
 80020be:	4013      	ands	r3, r2
 80020c0:	d00a      	beq.n	80020d8 <HAL_UART_IRQHandler+0x54>
    {
      if (huart->RxISR != NULL)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d100      	bne.n	80020cc <HAL_UART_IRQHandler+0x48>
 80020ca:	e1d1      	b.n	8002470 <HAL_UART_IRQHandler+0x3ec>
      {
        huart->RxISR(huart);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80020d0:	687a      	ldr	r2, [r7, #4]
 80020d2:	0010      	movs	r0, r2
 80020d4:	4798      	blx	r3
      }
      return;
 80020d6:	e1cb      	b.n	8002470 <HAL_UART_IRQHandler+0x3ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d100      	bne.n	80020e0 <HAL_UART_IRQHandler+0x5c>
 80020de:	e0d9      	b.n	8002294 <HAL_UART_IRQHandler+0x210>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80020e0:	697b      	ldr	r3, [r7, #20]
 80020e2:	2201      	movs	r2, #1
 80020e4:	4013      	ands	r3, r2
 80020e6:	d104      	bne.n	80020f2 <HAL_UART_IRQHandler+0x6e>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80020e8:	69bb      	ldr	r3, [r7, #24]
 80020ea:	4aa5      	ldr	r2, [pc, #660]	; (8002380 <HAL_UART_IRQHandler+0x2fc>)
 80020ec:	4013      	ands	r3, r2
 80020ee:	d100      	bne.n	80020f2 <HAL_UART_IRQHandler+0x6e>
 80020f0:	e0d0      	b.n	8002294 <HAL_UART_IRQHandler+0x210>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	2201      	movs	r2, #1
 80020f6:	4013      	ands	r3, r2
 80020f8:	d010      	beq.n	800211c <HAL_UART_IRQHandler+0x98>
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	2380      	movs	r3, #128	; 0x80
 80020fe:	005b      	lsls	r3, r3, #1
 8002100:	4013      	ands	r3, r2
 8002102:	d00b      	beq.n	800211c <HAL_UART_IRQHandler+0x98>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2201      	movs	r2, #1
 800210a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2280      	movs	r2, #128	; 0x80
 8002110:	589b      	ldr	r3, [r3, r2]
 8002112:	2201      	movs	r2, #1
 8002114:	431a      	orrs	r2, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2180      	movs	r1, #128	; 0x80
 800211a:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	2202      	movs	r2, #2
 8002120:	4013      	ands	r3, r2
 8002122:	d00f      	beq.n	8002144 <HAL_UART_IRQHandler+0xc0>
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	2201      	movs	r2, #1
 8002128:	4013      	ands	r3, r2
 800212a:	d00b      	beq.n	8002144 <HAL_UART_IRQHandler+0xc0>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2202      	movs	r2, #2
 8002132:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2280      	movs	r2, #128	; 0x80
 8002138:	589b      	ldr	r3, [r3, r2]
 800213a:	2204      	movs	r2, #4
 800213c:	431a      	orrs	r2, r3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	2180      	movs	r1, #128	; 0x80
 8002142:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	2204      	movs	r2, #4
 8002148:	4013      	ands	r3, r2
 800214a:	d00f      	beq.n	800216c <HAL_UART_IRQHandler+0xe8>
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	2201      	movs	r2, #1
 8002150:	4013      	ands	r3, r2
 8002152:	d00b      	beq.n	800216c <HAL_UART_IRQHandler+0xe8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	2204      	movs	r2, #4
 800215a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2280      	movs	r2, #128	; 0x80
 8002160:	589b      	ldr	r3, [r3, r2]
 8002162:	2202      	movs	r2, #2
 8002164:	431a      	orrs	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	2180      	movs	r1, #128	; 0x80
 800216a:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	2208      	movs	r2, #8
 8002170:	4013      	ands	r3, r2
 8002172:	d013      	beq.n	800219c <HAL_UART_IRQHandler+0x118>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	2220      	movs	r2, #32
 8002178:	4013      	ands	r3, r2
 800217a:	d103      	bne.n	8002184 <HAL_UART_IRQHandler+0x100>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	2201      	movs	r2, #1
 8002180:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002182:	d00b      	beq.n	800219c <HAL_UART_IRQHandler+0x118>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2208      	movs	r2, #8
 800218a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2280      	movs	r2, #128	; 0x80
 8002190:	589b      	ldr	r3, [r3, r2]
 8002192:	2208      	movs	r2, #8
 8002194:	431a      	orrs	r2, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2180      	movs	r1, #128	; 0x80
 800219a:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800219c:	69fa      	ldr	r2, [r7, #28]
 800219e:	2380      	movs	r3, #128	; 0x80
 80021a0:	011b      	lsls	r3, r3, #4
 80021a2:	4013      	ands	r3, r2
 80021a4:	d011      	beq.n	80021ca <HAL_UART_IRQHandler+0x146>
 80021a6:	69ba      	ldr	r2, [r7, #24]
 80021a8:	2380      	movs	r3, #128	; 0x80
 80021aa:	04db      	lsls	r3, r3, #19
 80021ac:	4013      	ands	r3, r2
 80021ae:	d00c      	beq.n	80021ca <HAL_UART_IRQHandler+0x146>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2280      	movs	r2, #128	; 0x80
 80021b6:	0112      	lsls	r2, r2, #4
 80021b8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	2280      	movs	r2, #128	; 0x80
 80021be:	589b      	ldr	r3, [r3, r2]
 80021c0:	2220      	movs	r2, #32
 80021c2:	431a      	orrs	r2, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2180      	movs	r1, #128	; 0x80
 80021c8:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	2280      	movs	r2, #128	; 0x80
 80021ce:	589b      	ldr	r3, [r3, r2]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d100      	bne.n	80021d6 <HAL_UART_IRQHandler+0x152>
 80021d4:	e14e      	b.n	8002474 <HAL_UART_IRQHandler+0x3f0>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	2220      	movs	r2, #32
 80021da:	4013      	ands	r3, r2
 80021dc:	d00c      	beq.n	80021f8 <HAL_UART_IRQHandler+0x174>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80021de:	69bb      	ldr	r3, [r7, #24]
 80021e0:	2220      	movs	r2, #32
 80021e2:	4013      	ands	r3, r2
 80021e4:	d008      	beq.n	80021f8 <HAL_UART_IRQHandler+0x174>
      {
        if (huart->RxISR != NULL)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d004      	beq.n	80021f8 <HAL_UART_IRQHandler+0x174>
        {
          huart->RxISR(huart);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021f2:	687a      	ldr	r2, [r7, #4]
 80021f4:	0010      	movs	r0, r2
 80021f6:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	2280      	movs	r2, #128	; 0x80
 80021fc:	589b      	ldr	r3, [r3, r2]
 80021fe:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	689b      	ldr	r3, [r3, #8]
 8002206:	2240      	movs	r2, #64	; 0x40
 8002208:	4013      	ands	r3, r2
 800220a:	2b40      	cmp	r3, #64	; 0x40
 800220c:	d003      	beq.n	8002216 <HAL_UART_IRQHandler+0x192>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	2228      	movs	r2, #40	; 0x28
 8002212:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002214:	d033      	beq.n	800227e <HAL_UART_IRQHandler+0x1fa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	0018      	movs	r0, r3
 800221a:	f000 fd2f 	bl	8002c7c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	2240      	movs	r2, #64	; 0x40
 8002226:	4013      	ands	r3, r2
 8002228:	2b40      	cmp	r3, #64	; 0x40
 800222a:	d123      	bne.n	8002274 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	689a      	ldr	r2, [r3, #8]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	2140      	movs	r1, #64	; 0x40
 8002238:	438a      	bics	r2, r1
 800223a:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002240:	2b00      	cmp	r3, #0
 8002242:	d012      	beq.n	800226a <HAL_UART_IRQHandler+0x1e6>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002248:	4a4e      	ldr	r2, [pc, #312]	; (8002384 <HAL_UART_IRQHandler+0x300>)
 800224a:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002250:	0018      	movs	r0, r3
 8002252:	f7fe fceb 	bl	8000c2c <HAL_DMA_Abort_IT>
 8002256:	1e03      	subs	r3, r0, #0
 8002258:	d01a      	beq.n	8002290 <HAL_UART_IRQHandler+0x20c>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800225e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002264:	0018      	movs	r0, r3
 8002266:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002268:	e012      	b.n	8002290 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	0018      	movs	r0, r3
 800226e:	f000 f915 	bl	800249c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002272:	e00d      	b.n	8002290 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	0018      	movs	r0, r3
 8002278:	f000 f910 	bl	800249c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800227c:	e008      	b.n	8002290 <HAL_UART_IRQHandler+0x20c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	0018      	movs	r0, r3
 8002282:	f000 f90b 	bl	800249c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2280      	movs	r2, #128	; 0x80
 800228a:	2100      	movs	r1, #0
 800228c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 800228e:	e0f1      	b.n	8002474 <HAL_UART_IRQHandler+0x3f0>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002290:	46c0      	nop			; (mov r8, r8)
    return;
 8002292:	e0ef      	b.n	8002474 <HAL_UART_IRQHandler+0x3f0>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002298:	2b01      	cmp	r3, #1
 800229a:	d000      	beq.n	800229e <HAL_UART_IRQHandler+0x21a>
 800229c:	e0b5      	b.n	800240a <HAL_UART_IRQHandler+0x386>
      &&((isrflags & USART_ISR_IDLE) != 0U)
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	2210      	movs	r2, #16
 80022a2:	4013      	ands	r3, r2
 80022a4:	d100      	bne.n	80022a8 <HAL_UART_IRQHandler+0x224>
 80022a6:	e0b0      	b.n	800240a <HAL_UART_IRQHandler+0x386>
      &&((cr1its & USART_ISR_IDLE) != 0U))
 80022a8:	69bb      	ldr	r3, [r7, #24]
 80022aa:	2210      	movs	r2, #16
 80022ac:	4013      	ands	r3, r2
 80022ae:	d100      	bne.n	80022b2 <HAL_UART_IRQHandler+0x22e>
 80022b0:	e0ab      	b.n	800240a <HAL_UART_IRQHandler+0x386>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	2210      	movs	r2, #16
 80022b8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	2240      	movs	r2, #64	; 0x40
 80022c2:	4013      	ands	r3, r2
 80022c4:	2b40      	cmp	r3, #64	; 0x40
 80022c6:	d161      	bne.n	800238c <HAL_UART_IRQHandler+0x308>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	685a      	ldr	r2, [r3, #4]
 80022d0:	2108      	movs	r1, #8
 80022d2:	187b      	adds	r3, r7, r1
 80022d4:	801a      	strh	r2, [r3, #0]
      if (  (nb_remaining_rx_data > 0U)
 80022d6:	187b      	adds	r3, r7, r1
 80022d8:	881b      	ldrh	r3, [r3, #0]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d100      	bne.n	80022e0 <HAL_UART_IRQHandler+0x25c>
 80022de:	e0cb      	b.n	8002478 <HAL_UART_IRQHandler+0x3f4>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2258      	movs	r2, #88	; 0x58
 80022e4:	5a9b      	ldrh	r3, [r3, r2]
 80022e6:	187a      	adds	r2, r7, r1
 80022e8:	8812      	ldrh	r2, [r2, #0]
 80022ea:	429a      	cmp	r2, r3
 80022ec:	d300      	bcc.n	80022f0 <HAL_UART_IRQHandler+0x26c>
 80022ee:	e0c3      	b.n	8002478 <HAL_UART_IRQHandler+0x3f4>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	187a      	adds	r2, r7, r1
 80022f4:	215a      	movs	r1, #90	; 0x5a
 80022f6:	8812      	ldrh	r2, [r2, #0]
 80022f8:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2220      	movs	r2, #32
 8002304:	4013      	ands	r3, r2
 8002306:	d12a      	bne.n	800235e <HAL_UART_IRQHandler+0x2da>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	491d      	ldr	r1, [pc, #116]	; (8002388 <HAL_UART_IRQHandler+0x304>)
 8002314:	400a      	ands	r2, r1
 8002316:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	689a      	ldr	r2, [r3, #8]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2101      	movs	r1, #1
 8002324:	438a      	bics	r2, r1
 8002326:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	689a      	ldr	r2, [r3, #8]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2140      	movs	r1, #64	; 0x40
 8002334:	438a      	bics	r2, r1
 8002336:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2220      	movs	r2, #32
 800233c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	2200      	movs	r2, #0
 8002342:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2110      	movs	r1, #16
 8002350:	438a      	bics	r2, r1
 8002352:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002358:	0018      	movs	r0, r3
 800235a:	f7fe fc27 	bl	8000bac <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2258      	movs	r2, #88	; 0x58
 8002362:	5a9a      	ldrh	r2, [r3, r2]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	215a      	movs	r1, #90	; 0x5a
 8002368:	5a5b      	ldrh	r3, [r3, r1]
 800236a:	b29b      	uxth	r3, r3
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	b29a      	uxth	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	0011      	movs	r1, r2
 8002374:	0018      	movs	r0, r3
 8002376:	f000 f899 	bl	80024ac <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800237a:	e07d      	b.n	8002478 <HAL_UART_IRQHandler+0x3f4>
 800237c:	0000080f 	.word	0x0000080f
 8002380:	04000120 	.word	0x04000120
 8002384:	08002cdd 	.word	0x08002cdd
 8002388:	fffffeff 	.word	0xfffffeff
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2258      	movs	r2, #88	; 0x58
 8002390:	5a99      	ldrh	r1, [r3, r2]
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	225a      	movs	r2, #90	; 0x5a
 8002396:	5a9b      	ldrh	r3, [r3, r2]
 8002398:	b29a      	uxth	r2, r3
 800239a:	200a      	movs	r0, #10
 800239c:	183b      	adds	r3, r7, r0
 800239e:	1a8a      	subs	r2, r1, r2
 80023a0:	801a      	strh	r2, [r3, #0]
      if (  (huart->RxXferCount > 0U)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	225a      	movs	r2, #90	; 0x5a
 80023a6:	5a9b      	ldrh	r3, [r3, r2]
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d100      	bne.n	80023b0 <HAL_UART_IRQHandler+0x32c>
 80023ae:	e065      	b.n	800247c <HAL_UART_IRQHandler+0x3f8>
          &&(nb_rx_data > 0U) )
 80023b0:	183b      	adds	r3, r7, r0
 80023b2:	881b      	ldrh	r3, [r3, #0]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d061      	beq.n	800247c <HAL_UART_IRQHandler+0x3f8>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4931      	ldr	r1, [pc, #196]	; (8002488 <HAL_UART_IRQHandler+0x404>)
 80023c4:	400a      	ands	r2, r1
 80023c6:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	689a      	ldr	r2, [r3, #8]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2101      	movs	r1, #1
 80023d4:	438a      	bics	r2, r1
 80023d6:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2220      	movs	r2, #32
 80023dc:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2200      	movs	r2, #0
 80023e8:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681a      	ldr	r2, [r3, #0]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2110      	movs	r1, #16
 80023f6:	438a      	bics	r2, r1
 80023f8:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80023fa:	183b      	adds	r3, r7, r0
 80023fc:	881a      	ldrh	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	0011      	movs	r1, r2
 8002402:	0018      	movs	r0, r3
 8002404:	f000 f852 	bl	80024ac <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8002408:	e038      	b.n	800247c <HAL_UART_IRQHandler+0x3f8>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800240a:	69fa      	ldr	r2, [r7, #28]
 800240c:	2380      	movs	r3, #128	; 0x80
 800240e:	035b      	lsls	r3, r3, #13
 8002410:	4013      	ands	r3, r2
 8002412:	d00e      	beq.n	8002432 <HAL_UART_IRQHandler+0x3ae>
 8002414:	697a      	ldr	r2, [r7, #20]
 8002416:	2380      	movs	r3, #128	; 0x80
 8002418:	03db      	lsls	r3, r3, #15
 800241a:	4013      	ands	r3, r2
 800241c:	d009      	beq.n	8002432 <HAL_UART_IRQHandler+0x3ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	2280      	movs	r2, #128	; 0x80
 8002424:	0352      	lsls	r2, r2, #13
 8002426:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	0018      	movs	r0, r3
 800242c:	f000 fc87 	bl	8002d3e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002430:	e027      	b.n	8002482 <HAL_UART_IRQHandler+0x3fe>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	2280      	movs	r2, #128	; 0x80
 8002436:	4013      	ands	r3, r2
 8002438:	d00d      	beq.n	8002456 <HAL_UART_IRQHandler+0x3d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800243a:	69bb      	ldr	r3, [r7, #24]
 800243c:	2280      	movs	r2, #128	; 0x80
 800243e:	4013      	ands	r3, r2
 8002440:	d009      	beq.n	8002456 <HAL_UART_IRQHandler+0x3d2>
  {
    if (huart->TxISR != NULL)
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002446:	2b00      	cmp	r3, #0
 8002448:	d01a      	beq.n	8002480 <HAL_UART_IRQHandler+0x3fc>
    {
      huart->TxISR(huart);
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	0010      	movs	r0, r2
 8002452:	4798      	blx	r3
    }
    return;
 8002454:	e014      	b.n	8002480 <HAL_UART_IRQHandler+0x3fc>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	2240      	movs	r2, #64	; 0x40
 800245a:	4013      	ands	r3, r2
 800245c:	d011      	beq.n	8002482 <HAL_UART_IRQHandler+0x3fe>
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	2240      	movs	r2, #64	; 0x40
 8002462:	4013      	ands	r3, r2
 8002464:	d00d      	beq.n	8002482 <HAL_UART_IRQHandler+0x3fe>
  {
    UART_EndTransmit_IT(huart);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	0018      	movs	r0, r3
 800246a:	f000 fc4e 	bl	8002d0a <UART_EndTransmit_IT>
    return;
 800246e:	e008      	b.n	8002482 <HAL_UART_IRQHandler+0x3fe>
      return;
 8002470:	46c0      	nop			; (mov r8, r8)
 8002472:	e006      	b.n	8002482 <HAL_UART_IRQHandler+0x3fe>
    return;
 8002474:	46c0      	nop			; (mov r8, r8)
 8002476:	e004      	b.n	8002482 <HAL_UART_IRQHandler+0x3fe>
      return;
 8002478:	46c0      	nop			; (mov r8, r8)
 800247a:	e002      	b.n	8002482 <HAL_UART_IRQHandler+0x3fe>
      return;
 800247c:	46c0      	nop			; (mov r8, r8)
 800247e:	e000      	b.n	8002482 <HAL_UART_IRQHandler+0x3fe>
    return;
 8002480:	46c0      	nop			; (mov r8, r8)
  }

}
 8002482:	46bd      	mov	sp, r7
 8002484:	b008      	add	sp, #32
 8002486:	bd80      	pop	{r7, pc}
 8002488:	fffffedf 	.word	0xfffffedf

0800248c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b082      	sub	sp, #8
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002494:	46c0      	nop			; (mov r8, r8)
 8002496:	46bd      	mov	sp, r7
 8002498:	b002      	add	sp, #8
 800249a:	bd80      	pop	{r7, pc}

0800249c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800249c:	b580      	push	{r7, lr}
 800249e:	b082      	sub	sp, #8
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80024a4:	46c0      	nop			; (mov r8, r8)
 80024a6:	46bd      	mov	sp, r7
 80024a8:	b002      	add	sp, #8
 80024aa:	bd80      	pop	{r7, pc}

080024ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	000a      	movs	r2, r1
 80024b6:	1cbb      	adds	r3, r7, #2
 80024b8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80024ba:	46c0      	nop			; (mov r8, r8)
 80024bc:	46bd      	mov	sp, r7
 80024be:	b002      	add	sp, #8
 80024c0:	bd80      	pop	{r7, pc}
	...

080024c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80024c4:	b5b0      	push	{r4, r5, r7, lr}
 80024c6:	b08e      	sub	sp, #56	; 0x38
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80024cc:	231a      	movs	r3, #26
 80024ce:	2218      	movs	r2, #24
 80024d0:	4694      	mov	ip, r2
 80024d2:	44bc      	add	ip, r7
 80024d4:	4463      	add	r3, ip
 80024d6:	2200      	movs	r2, #0
 80024d8:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	689a      	ldr	r2, [r3, #8]
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	431a      	orrs	r2, r3
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	695b      	ldr	r3, [r3, #20]
 80024e8:	431a      	orrs	r2, r3
 80024ea:	69fb      	ldr	r3, [r7, #28]
 80024ec:	69db      	ldr	r3, [r3, #28]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	4abc      	ldr	r2, [pc, #752]	; (80027ec <UART_SetConfig+0x328>)
 80024fa:	4013      	ands	r3, r2
 80024fc:	0019      	movs	r1, r3
 80024fe:	69fb      	ldr	r3, [r7, #28]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002504:	430a      	orrs	r2, r1
 8002506:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002508:	69fb      	ldr	r3, [r7, #28]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	4ab8      	ldr	r2, [pc, #736]	; (80027f0 <UART_SetConfig+0x32c>)
 8002510:	4013      	ands	r3, r2
 8002512:	0019      	movs	r1, r3
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	68da      	ldr	r2, [r3, #12]
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	430a      	orrs	r2, r1
 800251e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	699b      	ldr	r3, [r3, #24]
 8002524:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002526:	69fb      	ldr	r3, [r7, #28]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4ab2      	ldr	r2, [pc, #712]	; (80027f4 <UART_SetConfig+0x330>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d004      	beq.n	800253a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	6a1b      	ldr	r3, [r3, #32]
 8002534:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002536:	4313      	orrs	r3, r2
 8002538:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800253a:	69fb      	ldr	r3, [r7, #28]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	689b      	ldr	r3, [r3, #8]
 8002540:	4aad      	ldr	r2, [pc, #692]	; (80027f8 <UART_SetConfig+0x334>)
 8002542:	4013      	ands	r3, r2
 8002544:	0019      	movs	r1, r3
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800254c:	430a      	orrs	r2, r1
 800254e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4aa9      	ldr	r2, [pc, #676]	; (80027fc <UART_SetConfig+0x338>)
 8002556:	4293      	cmp	r3, r2
 8002558:	d136      	bne.n	80025c8 <UART_SetConfig+0x104>
 800255a:	4ba9      	ldr	r3, [pc, #676]	; (8002800 <UART_SetConfig+0x33c>)
 800255c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800255e:	220c      	movs	r2, #12
 8002560:	4013      	ands	r3, r2
 8002562:	2b0c      	cmp	r3, #12
 8002564:	d020      	beq.n	80025a8 <UART_SetConfig+0xe4>
 8002566:	d827      	bhi.n	80025b8 <UART_SetConfig+0xf4>
 8002568:	2b08      	cmp	r3, #8
 800256a:	d00d      	beq.n	8002588 <UART_SetConfig+0xc4>
 800256c:	d824      	bhi.n	80025b8 <UART_SetConfig+0xf4>
 800256e:	2b00      	cmp	r3, #0
 8002570:	d002      	beq.n	8002578 <UART_SetConfig+0xb4>
 8002572:	2b04      	cmp	r3, #4
 8002574:	d010      	beq.n	8002598 <UART_SetConfig+0xd4>
 8002576:	e01f      	b.n	80025b8 <UART_SetConfig+0xf4>
 8002578:	231b      	movs	r3, #27
 800257a:	2218      	movs	r2, #24
 800257c:	4694      	mov	ip, r2
 800257e:	44bc      	add	ip, r7
 8002580:	4463      	add	r3, ip
 8002582:	2200      	movs	r2, #0
 8002584:	701a      	strb	r2, [r3, #0]
 8002586:	e06f      	b.n	8002668 <UART_SetConfig+0x1a4>
 8002588:	231b      	movs	r3, #27
 800258a:	2218      	movs	r2, #24
 800258c:	4694      	mov	ip, r2
 800258e:	44bc      	add	ip, r7
 8002590:	4463      	add	r3, ip
 8002592:	2202      	movs	r2, #2
 8002594:	701a      	strb	r2, [r3, #0]
 8002596:	e067      	b.n	8002668 <UART_SetConfig+0x1a4>
 8002598:	231b      	movs	r3, #27
 800259a:	2218      	movs	r2, #24
 800259c:	4694      	mov	ip, r2
 800259e:	44bc      	add	ip, r7
 80025a0:	4463      	add	r3, ip
 80025a2:	2204      	movs	r2, #4
 80025a4:	701a      	strb	r2, [r3, #0]
 80025a6:	e05f      	b.n	8002668 <UART_SetConfig+0x1a4>
 80025a8:	231b      	movs	r3, #27
 80025aa:	2218      	movs	r2, #24
 80025ac:	4694      	mov	ip, r2
 80025ae:	44bc      	add	ip, r7
 80025b0:	4463      	add	r3, ip
 80025b2:	2208      	movs	r2, #8
 80025b4:	701a      	strb	r2, [r3, #0]
 80025b6:	e057      	b.n	8002668 <UART_SetConfig+0x1a4>
 80025b8:	231b      	movs	r3, #27
 80025ba:	2218      	movs	r2, #24
 80025bc:	4694      	mov	ip, r2
 80025be:	44bc      	add	ip, r7
 80025c0:	4463      	add	r3, ip
 80025c2:	2210      	movs	r2, #16
 80025c4:	701a      	strb	r2, [r3, #0]
 80025c6:	e04f      	b.n	8002668 <UART_SetConfig+0x1a4>
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a89      	ldr	r2, [pc, #548]	; (80027f4 <UART_SetConfig+0x330>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d143      	bne.n	800265a <UART_SetConfig+0x196>
 80025d2:	4b8b      	ldr	r3, [pc, #556]	; (8002800 <UART_SetConfig+0x33c>)
 80025d4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80025d6:	23c0      	movs	r3, #192	; 0xc0
 80025d8:	011b      	lsls	r3, r3, #4
 80025da:	4013      	ands	r3, r2
 80025dc:	22c0      	movs	r2, #192	; 0xc0
 80025de:	0112      	lsls	r2, r2, #4
 80025e0:	4293      	cmp	r3, r2
 80025e2:	d02a      	beq.n	800263a <UART_SetConfig+0x176>
 80025e4:	22c0      	movs	r2, #192	; 0xc0
 80025e6:	0112      	lsls	r2, r2, #4
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d82e      	bhi.n	800264a <UART_SetConfig+0x186>
 80025ec:	2280      	movs	r2, #128	; 0x80
 80025ee:	0112      	lsls	r2, r2, #4
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d012      	beq.n	800261a <UART_SetConfig+0x156>
 80025f4:	2280      	movs	r2, #128	; 0x80
 80025f6:	0112      	lsls	r2, r2, #4
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d826      	bhi.n	800264a <UART_SetConfig+0x186>
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d004      	beq.n	800260a <UART_SetConfig+0x146>
 8002600:	2280      	movs	r2, #128	; 0x80
 8002602:	00d2      	lsls	r2, r2, #3
 8002604:	4293      	cmp	r3, r2
 8002606:	d010      	beq.n	800262a <UART_SetConfig+0x166>
 8002608:	e01f      	b.n	800264a <UART_SetConfig+0x186>
 800260a:	231b      	movs	r3, #27
 800260c:	2218      	movs	r2, #24
 800260e:	4694      	mov	ip, r2
 8002610:	44bc      	add	ip, r7
 8002612:	4463      	add	r3, ip
 8002614:	2200      	movs	r2, #0
 8002616:	701a      	strb	r2, [r3, #0]
 8002618:	e026      	b.n	8002668 <UART_SetConfig+0x1a4>
 800261a:	231b      	movs	r3, #27
 800261c:	2218      	movs	r2, #24
 800261e:	4694      	mov	ip, r2
 8002620:	44bc      	add	ip, r7
 8002622:	4463      	add	r3, ip
 8002624:	2202      	movs	r2, #2
 8002626:	701a      	strb	r2, [r3, #0]
 8002628:	e01e      	b.n	8002668 <UART_SetConfig+0x1a4>
 800262a:	231b      	movs	r3, #27
 800262c:	2218      	movs	r2, #24
 800262e:	4694      	mov	ip, r2
 8002630:	44bc      	add	ip, r7
 8002632:	4463      	add	r3, ip
 8002634:	2204      	movs	r2, #4
 8002636:	701a      	strb	r2, [r3, #0]
 8002638:	e016      	b.n	8002668 <UART_SetConfig+0x1a4>
 800263a:	231b      	movs	r3, #27
 800263c:	2218      	movs	r2, #24
 800263e:	4694      	mov	ip, r2
 8002640:	44bc      	add	ip, r7
 8002642:	4463      	add	r3, ip
 8002644:	2208      	movs	r2, #8
 8002646:	701a      	strb	r2, [r3, #0]
 8002648:	e00e      	b.n	8002668 <UART_SetConfig+0x1a4>
 800264a:	231b      	movs	r3, #27
 800264c:	2218      	movs	r2, #24
 800264e:	4694      	mov	ip, r2
 8002650:	44bc      	add	ip, r7
 8002652:	4463      	add	r3, ip
 8002654:	2210      	movs	r2, #16
 8002656:	701a      	strb	r2, [r3, #0]
 8002658:	e006      	b.n	8002668 <UART_SetConfig+0x1a4>
 800265a:	231b      	movs	r3, #27
 800265c:	2218      	movs	r2, #24
 800265e:	4694      	mov	ip, r2
 8002660:	44bc      	add	ip, r7
 8002662:	4463      	add	r3, ip
 8002664:	2210      	movs	r2, #16
 8002666:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a61      	ldr	r2, [pc, #388]	; (80027f4 <UART_SetConfig+0x330>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d000      	beq.n	8002674 <UART_SetConfig+0x1b0>
 8002672:	e088      	b.n	8002786 <UART_SetConfig+0x2c2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002674:	231b      	movs	r3, #27
 8002676:	2218      	movs	r2, #24
 8002678:	4694      	mov	ip, r2
 800267a:	44bc      	add	ip, r7
 800267c:	4463      	add	r3, ip
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	2b08      	cmp	r3, #8
 8002682:	d01d      	beq.n	80026c0 <UART_SetConfig+0x1fc>
 8002684:	dc20      	bgt.n	80026c8 <UART_SetConfig+0x204>
 8002686:	2b04      	cmp	r3, #4
 8002688:	d015      	beq.n	80026b6 <UART_SetConfig+0x1f2>
 800268a:	dc1d      	bgt.n	80026c8 <UART_SetConfig+0x204>
 800268c:	2b00      	cmp	r3, #0
 800268e:	d002      	beq.n	8002696 <UART_SetConfig+0x1d2>
 8002690:	2b02      	cmp	r3, #2
 8002692:	d005      	beq.n	80026a0 <UART_SetConfig+0x1dc>
 8002694:	e018      	b.n	80026c8 <UART_SetConfig+0x204>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002696:	f7ff fb4f 	bl	8001d38 <HAL_RCC_GetPCLK1Freq>
 800269a:	0003      	movs	r3, r0
 800269c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800269e:	e01d      	b.n	80026dc <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80026a0:	4b57      	ldr	r3, [pc, #348]	; (8002800 <UART_SetConfig+0x33c>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	2210      	movs	r2, #16
 80026a6:	4013      	ands	r3, r2
 80026a8:	d002      	beq.n	80026b0 <UART_SetConfig+0x1ec>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80026aa:	4b56      	ldr	r3, [pc, #344]	; (8002804 <UART_SetConfig+0x340>)
 80026ac:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80026ae:	e015      	b.n	80026dc <UART_SetConfig+0x218>
          pclk = (uint32_t) HSI_VALUE;
 80026b0:	4b55      	ldr	r3, [pc, #340]	; (8002808 <UART_SetConfig+0x344>)
 80026b2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80026b4:	e012      	b.n	80026dc <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80026b6:	f7ff fa8f 	bl	8001bd8 <HAL_RCC_GetSysClockFreq>
 80026ba:	0003      	movs	r3, r0
 80026bc:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80026be:	e00d      	b.n	80026dc <UART_SetConfig+0x218>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80026c0:	2380      	movs	r3, #128	; 0x80
 80026c2:	021b      	lsls	r3, r3, #8
 80026c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80026c6:	e009      	b.n	80026dc <UART_SetConfig+0x218>
      default:
        pclk = 0U;
 80026c8:	2300      	movs	r3, #0
 80026ca:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80026cc:	231a      	movs	r3, #26
 80026ce:	2218      	movs	r2, #24
 80026d0:	4694      	mov	ip, r2
 80026d2:	44bc      	add	ip, r7
 80026d4:	4463      	add	r3, ip
 80026d6:	2201      	movs	r2, #1
 80026d8:	701a      	strb	r2, [r3, #0]
        break;
 80026da:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80026dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d100      	bne.n	80026e4 <UART_SetConfig+0x220>
 80026e2:	e139      	b.n	8002958 <UART_SetConfig+0x494>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	685a      	ldr	r2, [r3, #4]
 80026e8:	0013      	movs	r3, r2
 80026ea:	005b      	lsls	r3, r3, #1
 80026ec:	189b      	adds	r3, r3, r2
 80026ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d305      	bcc.n	8002700 <UART_SetConfig+0x23c>
          (pclk > (4096U * huart->Init.BaudRate)))
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80026fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d907      	bls.n	8002710 <UART_SetConfig+0x24c>
      {
        ret = HAL_ERROR;
 8002700:	231a      	movs	r3, #26
 8002702:	2218      	movs	r2, #24
 8002704:	4694      	mov	ip, r2
 8002706:	44bc      	add	ip, r7
 8002708:	4463      	add	r3, ip
 800270a:	2201      	movs	r2, #1
 800270c:	701a      	strb	r2, [r3, #0]
 800270e:	e123      	b.n	8002958 <UART_SetConfig+0x494>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002712:	613b      	str	r3, [r7, #16]
 8002714:	2300      	movs	r3, #0
 8002716:	617b      	str	r3, [r7, #20]
 8002718:	6939      	ldr	r1, [r7, #16]
 800271a:	697a      	ldr	r2, [r7, #20]
 800271c:	000b      	movs	r3, r1
 800271e:	0e1b      	lsrs	r3, r3, #24
 8002720:	0010      	movs	r0, r2
 8002722:	0205      	lsls	r5, r0, #8
 8002724:	431d      	orrs	r5, r3
 8002726:	000b      	movs	r3, r1
 8002728:	021c      	lsls	r4, r3, #8
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	685b      	ldr	r3, [r3, #4]
 800272e:	085b      	lsrs	r3, r3, #1
 8002730:	60bb      	str	r3, [r7, #8]
 8002732:	2300      	movs	r3, #0
 8002734:	60fb      	str	r3, [r7, #12]
 8002736:	68b8      	ldr	r0, [r7, #8]
 8002738:	68f9      	ldr	r1, [r7, #12]
 800273a:	1900      	adds	r0, r0, r4
 800273c:	4169      	adcs	r1, r5
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	603b      	str	r3, [r7, #0]
 8002744:	2300      	movs	r3, #0
 8002746:	607b      	str	r3, [r7, #4]
 8002748:	683a      	ldr	r2, [r7, #0]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f7fd fd68 	bl	8000220 <__aeabi_uldivmod>
 8002750:	0002      	movs	r2, r0
 8002752:	000b      	movs	r3, r1
 8002754:	0013      	movs	r3, r2
 8002756:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002758:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800275a:	23c0      	movs	r3, #192	; 0xc0
 800275c:	009b      	lsls	r3, r3, #2
 800275e:	429a      	cmp	r2, r3
 8002760:	d309      	bcc.n	8002776 <UART_SetConfig+0x2b2>
 8002762:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002764:	2380      	movs	r3, #128	; 0x80
 8002766:	035b      	lsls	r3, r3, #13
 8002768:	429a      	cmp	r2, r3
 800276a:	d204      	bcs.n	8002776 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002772:	60da      	str	r2, [r3, #12]
 8002774:	e0f0      	b.n	8002958 <UART_SetConfig+0x494>
        }
        else
        {
          ret = HAL_ERROR;
 8002776:	231a      	movs	r3, #26
 8002778:	2218      	movs	r2, #24
 800277a:	4694      	mov	ip, r2
 800277c:	44bc      	add	ip, r7
 800277e:	4463      	add	r3, ip
 8002780:	2201      	movs	r2, #1
 8002782:	701a      	strb	r2, [r3, #0]
 8002784:	e0e8      	b.n	8002958 <UART_SetConfig+0x494>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	69da      	ldr	r2, [r3, #28]
 800278a:	2380      	movs	r3, #128	; 0x80
 800278c:	021b      	lsls	r3, r3, #8
 800278e:	429a      	cmp	r2, r3
 8002790:	d000      	beq.n	8002794 <UART_SetConfig+0x2d0>
 8002792:	e087      	b.n	80028a4 <UART_SetConfig+0x3e0>
  {
    switch (clocksource)
 8002794:	231b      	movs	r3, #27
 8002796:	2218      	movs	r2, #24
 8002798:	4694      	mov	ip, r2
 800279a:	44bc      	add	ip, r7
 800279c:	4463      	add	r3, ip
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	2b08      	cmp	r3, #8
 80027a2:	d835      	bhi.n	8002810 <UART_SetConfig+0x34c>
 80027a4:	009a      	lsls	r2, r3, #2
 80027a6:	4b19      	ldr	r3, [pc, #100]	; (800280c <UART_SetConfig+0x348>)
 80027a8:	18d3      	adds	r3, r2, r3
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80027ae:	f7ff fac3 	bl	8001d38 <HAL_RCC_GetPCLK1Freq>
 80027b2:	0003      	movs	r3, r0
 80027b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80027b6:	e035      	b.n	8002824 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80027b8:	f7ff fad4 	bl	8001d64 <HAL_RCC_GetPCLK2Freq>
 80027bc:	0003      	movs	r3, r0
 80027be:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80027c0:	e030      	b.n	8002824 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80027c2:	4b0f      	ldr	r3, [pc, #60]	; (8002800 <UART_SetConfig+0x33c>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	2210      	movs	r2, #16
 80027c8:	4013      	ands	r3, r2
 80027ca:	d002      	beq.n	80027d2 <UART_SetConfig+0x30e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80027cc:	4b0d      	ldr	r3, [pc, #52]	; (8002804 <UART_SetConfig+0x340>)
 80027ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80027d0:	e028      	b.n	8002824 <UART_SetConfig+0x360>
          pclk = (uint32_t) HSI_VALUE;
 80027d2:	4b0d      	ldr	r3, [pc, #52]	; (8002808 <UART_SetConfig+0x344>)
 80027d4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80027d6:	e025      	b.n	8002824 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80027d8:	f7ff f9fe 	bl	8001bd8 <HAL_RCC_GetSysClockFreq>
 80027dc:	0003      	movs	r3, r0
 80027de:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80027e0:	e020      	b.n	8002824 <UART_SetConfig+0x360>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80027e2:	2380      	movs	r3, #128	; 0x80
 80027e4:	021b      	lsls	r3, r3, #8
 80027e6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80027e8:	e01c      	b.n	8002824 <UART_SetConfig+0x360>
 80027ea:	46c0      	nop			; (mov r8, r8)
 80027ec:	efff69f3 	.word	0xefff69f3
 80027f0:	ffffcfff 	.word	0xffffcfff
 80027f4:	40004800 	.word	0x40004800
 80027f8:	fffff4ff 	.word	0xfffff4ff
 80027fc:	40004400 	.word	0x40004400
 8002800:	40021000 	.word	0x40021000
 8002804:	003d0900 	.word	0x003d0900
 8002808:	00f42400 	.word	0x00f42400
 800280c:	08002de4 	.word	0x08002de4
      default:
        pclk = 0U;
 8002810:	2300      	movs	r3, #0
 8002812:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002814:	231a      	movs	r3, #26
 8002816:	2218      	movs	r2, #24
 8002818:	4694      	mov	ip, r2
 800281a:	44bc      	add	ip, r7
 800281c:	4463      	add	r3, ip
 800281e:	2201      	movs	r2, #1
 8002820:	701a      	strb	r2, [r3, #0]
        break;
 8002822:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002826:	2b00      	cmp	r3, #0
 8002828:	d100      	bne.n	800282c <UART_SetConfig+0x368>
 800282a:	e095      	b.n	8002958 <UART_SetConfig+0x494>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800282c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800282e:	005a      	lsls	r2, r3, #1
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	085b      	lsrs	r3, r3, #1
 8002836:	18d2      	adds	r2, r2, r3
 8002838:	69fb      	ldr	r3, [r7, #28]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	0019      	movs	r1, r3
 800283e:	0010      	movs	r0, r2
 8002840:	f7fd fc62 	bl	8000108 <__udivsi3>
 8002844:	0003      	movs	r3, r0
 8002846:	b29b      	uxth	r3, r3
 8002848:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800284a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800284c:	2b0f      	cmp	r3, #15
 800284e:	d921      	bls.n	8002894 <UART_SetConfig+0x3d0>
 8002850:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002852:	2380      	movs	r3, #128	; 0x80
 8002854:	025b      	lsls	r3, r3, #9
 8002856:	429a      	cmp	r2, r3
 8002858:	d21c      	bcs.n	8002894 <UART_SetConfig+0x3d0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800285a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800285c:	b29a      	uxth	r2, r3
 800285e:	200e      	movs	r0, #14
 8002860:	2418      	movs	r4, #24
 8002862:	193b      	adds	r3, r7, r4
 8002864:	181b      	adds	r3, r3, r0
 8002866:	210f      	movs	r1, #15
 8002868:	438a      	bics	r2, r1
 800286a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800286c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800286e:	085b      	lsrs	r3, r3, #1
 8002870:	b29b      	uxth	r3, r3
 8002872:	2207      	movs	r2, #7
 8002874:	4013      	ands	r3, r2
 8002876:	b299      	uxth	r1, r3
 8002878:	193b      	adds	r3, r7, r4
 800287a:	181b      	adds	r3, r3, r0
 800287c:	193a      	adds	r2, r7, r4
 800287e:	1812      	adds	r2, r2, r0
 8002880:	8812      	ldrh	r2, [r2, #0]
 8002882:	430a      	orrs	r2, r1
 8002884:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002886:	69fb      	ldr	r3, [r7, #28]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	193a      	adds	r2, r7, r4
 800288c:	1812      	adds	r2, r2, r0
 800288e:	8812      	ldrh	r2, [r2, #0]
 8002890:	60da      	str	r2, [r3, #12]
 8002892:	e061      	b.n	8002958 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 8002894:	231a      	movs	r3, #26
 8002896:	2218      	movs	r2, #24
 8002898:	4694      	mov	ip, r2
 800289a:	44bc      	add	ip, r7
 800289c:	4463      	add	r3, ip
 800289e:	2201      	movs	r2, #1
 80028a0:	701a      	strb	r2, [r3, #0]
 80028a2:	e059      	b.n	8002958 <UART_SetConfig+0x494>
      }
    }
  }
  else
  {
    switch (clocksource)
 80028a4:	231b      	movs	r3, #27
 80028a6:	2218      	movs	r2, #24
 80028a8:	4694      	mov	ip, r2
 80028aa:	44bc      	add	ip, r7
 80028ac:	4463      	add	r3, ip
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	2b08      	cmp	r3, #8
 80028b2:	d822      	bhi.n	80028fa <UART_SetConfig+0x436>
 80028b4:	009a      	lsls	r2, r3, #2
 80028b6:	4b30      	ldr	r3, [pc, #192]	; (8002978 <UART_SetConfig+0x4b4>)
 80028b8:	18d3      	adds	r3, r2, r3
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80028be:	f7ff fa3b 	bl	8001d38 <HAL_RCC_GetPCLK1Freq>
 80028c2:	0003      	movs	r3, r0
 80028c4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80028c6:	e022      	b.n	800290e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80028c8:	f7ff fa4c 	bl	8001d64 <HAL_RCC_GetPCLK2Freq>
 80028cc:	0003      	movs	r3, r0
 80028ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80028d0:	e01d      	b.n	800290e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80028d2:	4b2a      	ldr	r3, [pc, #168]	; (800297c <UART_SetConfig+0x4b8>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2210      	movs	r2, #16
 80028d8:	4013      	ands	r3, r2
 80028da:	d002      	beq.n	80028e2 <UART_SetConfig+0x41e>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80028dc:	4b28      	ldr	r3, [pc, #160]	; (8002980 <UART_SetConfig+0x4bc>)
 80028de:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80028e0:	e015      	b.n	800290e <UART_SetConfig+0x44a>
          pclk = (uint32_t) HSI_VALUE;
 80028e2:	4b28      	ldr	r3, [pc, #160]	; (8002984 <UART_SetConfig+0x4c0>)
 80028e4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80028e6:	e012      	b.n	800290e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80028e8:	f7ff f976 	bl	8001bd8 <HAL_RCC_GetSysClockFreq>
 80028ec:	0003      	movs	r3, r0
 80028ee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80028f0:	e00d      	b.n	800290e <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80028f2:	2380      	movs	r3, #128	; 0x80
 80028f4:	021b      	lsls	r3, r3, #8
 80028f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80028f8:	e009      	b.n	800290e <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80028fa:	2300      	movs	r3, #0
 80028fc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80028fe:	231a      	movs	r3, #26
 8002900:	2218      	movs	r2, #24
 8002902:	4694      	mov	ip, r2
 8002904:	44bc      	add	ip, r7
 8002906:	4463      	add	r3, ip
 8002908:	2201      	movs	r2, #1
 800290a:	701a      	strb	r2, [r3, #0]
        break;
 800290c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800290e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002910:	2b00      	cmp	r3, #0
 8002912:	d021      	beq.n	8002958 <UART_SetConfig+0x494>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002914:	69fb      	ldr	r3, [r7, #28]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	085a      	lsrs	r2, r3, #1
 800291a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800291c:	18d2      	adds	r2, r2, r3
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	0019      	movs	r1, r3
 8002924:	0010      	movs	r0, r2
 8002926:	f7fd fbef 	bl	8000108 <__udivsi3>
 800292a:	0003      	movs	r3, r0
 800292c:	b29b      	uxth	r3, r3
 800292e:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002932:	2b0f      	cmp	r3, #15
 8002934:	d909      	bls.n	800294a <UART_SetConfig+0x486>
 8002936:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002938:	2380      	movs	r3, #128	; 0x80
 800293a:	025b      	lsls	r3, r3, #9
 800293c:	429a      	cmp	r2, r3
 800293e:	d204      	bcs.n	800294a <UART_SetConfig+0x486>
      {
        huart->Instance->BRR = usartdiv;
 8002940:	69fb      	ldr	r3, [r7, #28]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002946:	60da      	str	r2, [r3, #12]
 8002948:	e006      	b.n	8002958 <UART_SetConfig+0x494>
      }
      else
      {
        ret = HAL_ERROR;
 800294a:	231a      	movs	r3, #26
 800294c:	2218      	movs	r2, #24
 800294e:	4694      	mov	ip, r2
 8002950:	44bc      	add	ip, r7
 8002952:	4463      	add	r3, ip
 8002954:	2201      	movs	r2, #1
 8002956:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	2200      	movs	r2, #0
 800295c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	2200      	movs	r2, #0
 8002962:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002964:	231a      	movs	r3, #26
 8002966:	2218      	movs	r2, #24
 8002968:	4694      	mov	ip, r2
 800296a:	44bc      	add	ip, r7
 800296c:	4463      	add	r3, ip
 800296e:	781b      	ldrb	r3, [r3, #0]
}
 8002970:	0018      	movs	r0, r3
 8002972:	46bd      	mov	sp, r7
 8002974:	b00e      	add	sp, #56	; 0x38
 8002976:	bdb0      	pop	{r4, r5, r7, pc}
 8002978:	08002e08 	.word	0x08002e08
 800297c:	40021000 	.word	0x40021000
 8002980:	003d0900 	.word	0x003d0900
 8002984:	00f42400 	.word	0x00f42400

08002988 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002994:	2201      	movs	r2, #1
 8002996:	4013      	ands	r3, r2
 8002998:	d00b      	beq.n	80029b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	4a4a      	ldr	r2, [pc, #296]	; (8002acc <UART_AdvFeatureConfig+0x144>)
 80029a2:	4013      	ands	r3, r2
 80029a4:	0019      	movs	r1, r3
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	430a      	orrs	r2, r1
 80029b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b6:	2202      	movs	r2, #2
 80029b8:	4013      	ands	r3, r2
 80029ba:	d00b      	beq.n	80029d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	685b      	ldr	r3, [r3, #4]
 80029c2:	4a43      	ldr	r2, [pc, #268]	; (8002ad0 <UART_AdvFeatureConfig+0x148>)
 80029c4:	4013      	ands	r3, r2
 80029c6:	0019      	movs	r1, r3
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	430a      	orrs	r2, r1
 80029d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d8:	2204      	movs	r2, #4
 80029da:	4013      	ands	r3, r2
 80029dc:	d00b      	beq.n	80029f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	4a3b      	ldr	r2, [pc, #236]	; (8002ad4 <UART_AdvFeatureConfig+0x14c>)
 80029e6:	4013      	ands	r3, r2
 80029e8:	0019      	movs	r1, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	430a      	orrs	r2, r1
 80029f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fa:	2208      	movs	r2, #8
 80029fc:	4013      	ands	r3, r2
 80029fe:	d00b      	beq.n	8002a18 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	4a34      	ldr	r2, [pc, #208]	; (8002ad8 <UART_AdvFeatureConfig+0x150>)
 8002a08:	4013      	ands	r3, r2
 8002a0a:	0019      	movs	r1, r3
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	430a      	orrs	r2, r1
 8002a16:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1c:	2210      	movs	r2, #16
 8002a1e:	4013      	ands	r3, r2
 8002a20:	d00b      	beq.n	8002a3a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	4a2c      	ldr	r2, [pc, #176]	; (8002adc <UART_AdvFeatureConfig+0x154>)
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	0019      	movs	r1, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	430a      	orrs	r2, r1
 8002a38:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3e:	2220      	movs	r2, #32
 8002a40:	4013      	ands	r3, r2
 8002a42:	d00b      	beq.n	8002a5c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	689b      	ldr	r3, [r3, #8]
 8002a4a:	4a25      	ldr	r2, [pc, #148]	; (8002ae0 <UART_AdvFeatureConfig+0x158>)
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	0019      	movs	r1, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a60:	2240      	movs	r2, #64	; 0x40
 8002a62:	4013      	ands	r3, r2
 8002a64:	d01d      	beq.n	8002aa2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	4a1d      	ldr	r2, [pc, #116]	; (8002ae4 <UART_AdvFeatureConfig+0x15c>)
 8002a6e:	4013      	ands	r3, r2
 8002a70:	0019      	movs	r1, r3
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002a82:	2380      	movs	r3, #128	; 0x80
 8002a84:	035b      	lsls	r3, r3, #13
 8002a86:	429a      	cmp	r2, r3
 8002a88:	d10b      	bne.n	8002aa2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	4a15      	ldr	r2, [pc, #84]	; (8002ae8 <UART_AdvFeatureConfig+0x160>)
 8002a92:	4013      	ands	r3, r2
 8002a94:	0019      	movs	r1, r3
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa6:	2280      	movs	r2, #128	; 0x80
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	d00b      	beq.n	8002ac4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	685b      	ldr	r3, [r3, #4]
 8002ab2:	4a0e      	ldr	r2, [pc, #56]	; (8002aec <UART_AdvFeatureConfig+0x164>)
 8002ab4:	4013      	ands	r3, r2
 8002ab6:	0019      	movs	r1, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	430a      	orrs	r2, r1
 8002ac2:	605a      	str	r2, [r3, #4]
  }
}
 8002ac4:	46c0      	nop			; (mov r8, r8)
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	b002      	add	sp, #8
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	fffdffff 	.word	0xfffdffff
 8002ad0:	fffeffff 	.word	0xfffeffff
 8002ad4:	fffbffff 	.word	0xfffbffff
 8002ad8:	ffff7fff 	.word	0xffff7fff
 8002adc:	ffffefff 	.word	0xffffefff
 8002ae0:	ffffdfff 	.word	0xffffdfff
 8002ae4:	ffefffff 	.word	0xffefffff
 8002ae8:	ff9fffff 	.word	0xff9fffff
 8002aec:	fff7ffff 	.word	0xfff7ffff

08002af0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af02      	add	r7, sp, #8
 8002af6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2280      	movs	r2, #128	; 0x80
 8002afc:	2100      	movs	r1, #0
 8002afe:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002b00:	f7fd ff6c 	bl	80009dc <HAL_GetTick>
 8002b04:	0003      	movs	r3, r0
 8002b06:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	2208      	movs	r2, #8
 8002b10:	4013      	ands	r3, r2
 8002b12:	2b08      	cmp	r3, #8
 8002b14:	d10c      	bne.n	8002b30 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	2280      	movs	r2, #128	; 0x80
 8002b1a:	0391      	lsls	r1, r2, #14
 8002b1c:	6878      	ldr	r0, [r7, #4]
 8002b1e:	4a17      	ldr	r2, [pc, #92]	; (8002b7c <UART_CheckIdleState+0x8c>)
 8002b20:	9200      	str	r2, [sp, #0]
 8002b22:	2200      	movs	r2, #0
 8002b24:	f000 f82c 	bl	8002b80 <UART_WaitOnFlagUntilTimeout>
 8002b28:	1e03      	subs	r3, r0, #0
 8002b2a:	d001      	beq.n	8002b30 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e021      	b.n	8002b74 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	2204      	movs	r2, #4
 8002b38:	4013      	ands	r3, r2
 8002b3a:	2b04      	cmp	r3, #4
 8002b3c:	d10c      	bne.n	8002b58 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2280      	movs	r2, #128	; 0x80
 8002b42:	03d1      	lsls	r1, r2, #15
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	4a0d      	ldr	r2, [pc, #52]	; (8002b7c <UART_CheckIdleState+0x8c>)
 8002b48:	9200      	str	r2, [sp, #0]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	f000 f818 	bl	8002b80 <UART_WaitOnFlagUntilTimeout>
 8002b50:	1e03      	subs	r3, r0, #0
 8002b52:	d001      	beq.n	8002b58 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b54:	2303      	movs	r3, #3
 8002b56:	e00d      	b.n	8002b74 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2220      	movs	r2, #32
 8002b5c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2220      	movs	r2, #32
 8002b62:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2274      	movs	r2, #116	; 0x74
 8002b6e:	2100      	movs	r1, #0
 8002b70:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002b72:	2300      	movs	r3, #0
}
 8002b74:	0018      	movs	r0, r3
 8002b76:	46bd      	mov	sp, r7
 8002b78:	b004      	add	sp, #16
 8002b7a:	bd80      	pop	{r7, pc}
 8002b7c:	01ffffff 	.word	0x01ffffff

08002b80 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b084      	sub	sp, #16
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	603b      	str	r3, [r7, #0]
 8002b8c:	1dfb      	adds	r3, r7, #7
 8002b8e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002b90:	e05e      	b.n	8002c50 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b92:	69bb      	ldr	r3, [r7, #24]
 8002b94:	3301      	adds	r3, #1
 8002b96:	d05b      	beq.n	8002c50 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b98:	f7fd ff20 	bl	80009dc <HAL_GetTick>
 8002b9c:	0002      	movs	r2, r0
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d302      	bcc.n	8002bae <UART_WaitOnFlagUntilTimeout+0x2e>
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d11b      	bne.n	8002be6 <UART_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	681a      	ldr	r2, [r3, #0]
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	492f      	ldr	r1, [pc, #188]	; (8002c78 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002bba:	400a      	ands	r2, r1
 8002bbc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	689a      	ldr	r2, [r3, #8]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	2101      	movs	r1, #1
 8002bca:	438a      	bics	r2, r1
 8002bcc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2220      	movs	r2, #32
 8002bd2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2220      	movs	r2, #32
 8002bd8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2274      	movs	r2, #116	; 0x74
 8002bde:	2100      	movs	r1, #0
 8002be0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e044      	b.n	8002c70 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2204      	movs	r2, #4
 8002bee:	4013      	ands	r3, r2
 8002bf0:	d02e      	beq.n	8002c50 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	69da      	ldr	r2, [r3, #28]
 8002bf8:	2380      	movs	r3, #128	; 0x80
 8002bfa:	011b      	lsls	r3, r3, #4
 8002bfc:	401a      	ands	r2, r3
 8002bfe:	2380      	movs	r3, #128	; 0x80
 8002c00:	011b      	lsls	r3, r3, #4
 8002c02:	429a      	cmp	r2, r3
 8002c04:	d124      	bne.n	8002c50 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	2280      	movs	r2, #128	; 0x80
 8002c0c:	0112      	lsls	r2, r2, #4
 8002c0e:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4917      	ldr	r1, [pc, #92]	; (8002c78 <UART_WaitOnFlagUntilTimeout+0xf8>)
 8002c1c:	400a      	ands	r2, r1
 8002c1e:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	689a      	ldr	r2, [r3, #8]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2101      	movs	r1, #1
 8002c2c:	438a      	bics	r2, r1
 8002c2e:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2220      	movs	r2, #32
 8002c34:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	2220      	movs	r2, #32
 8002c3a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	2280      	movs	r2, #128	; 0x80
 8002c40:	2120      	movs	r1, #32
 8002c42:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2274      	movs	r2, #116	; 0x74
 8002c48:	2100      	movs	r1, #0
 8002c4a:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002c4c:	2303      	movs	r3, #3
 8002c4e:	e00f      	b.n	8002c70 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	69db      	ldr	r3, [r3, #28]
 8002c56:	68ba      	ldr	r2, [r7, #8]
 8002c58:	4013      	ands	r3, r2
 8002c5a:	68ba      	ldr	r2, [r7, #8]
 8002c5c:	1ad3      	subs	r3, r2, r3
 8002c5e:	425a      	negs	r2, r3
 8002c60:	4153      	adcs	r3, r2
 8002c62:	b2db      	uxtb	r3, r3
 8002c64:	001a      	movs	r2, r3
 8002c66:	1dfb      	adds	r3, r7, #7
 8002c68:	781b      	ldrb	r3, [r3, #0]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d091      	beq.n	8002b92 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	0018      	movs	r0, r3
 8002c72:	46bd      	mov	sp, r7
 8002c74:	b004      	add	sp, #16
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	fffffe5f 	.word	0xfffffe5f

08002c7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b082      	sub	sp, #8
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4912      	ldr	r1, [pc, #72]	; (8002cd8 <UART_EndRxTransfer+0x5c>)
 8002c90:	400a      	ands	r2, r1
 8002c92:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	689a      	ldr	r2, [r3, #8]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2101      	movs	r1, #1
 8002ca0:	438a      	bics	r2, r1
 8002ca2:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ca8:	2b01      	cmp	r3, #1
 8002caa:	d107      	bne.n	8002cbc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	2110      	movs	r1, #16
 8002cb8:	438a      	bics	r2, r1
 8002cba:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2220      	movs	r2, #32
 8002cc0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2200      	movs	r2, #0
 8002ccc:	665a      	str	r2, [r3, #100]	; 0x64
}
 8002cce:	46c0      	nop			; (mov r8, r8)
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	b002      	add	sp, #8
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	46c0      	nop			; (mov r8, r8)
 8002cd8:	fffffedf 	.word	0xfffffedf

08002cdc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ce8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	225a      	movs	r2, #90	; 0x5a
 8002cee:	2100      	movs	r1, #0
 8002cf0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2252      	movs	r2, #82	; 0x52
 8002cf6:	2100      	movs	r1, #0
 8002cf8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	0018      	movs	r0, r3
 8002cfe:	f7ff fbcd 	bl	800249c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d02:	46c0      	nop			; (mov r8, r8)
 8002d04:	46bd      	mov	sp, r7
 8002d06:	b004      	add	sp, #16
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b082      	sub	sp, #8
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2140      	movs	r1, #64	; 0x40
 8002d1e:	438a      	bics	r2, r1
 8002d20:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2220      	movs	r2, #32
 8002d26:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	0018      	movs	r0, r3
 8002d32:	f7ff fbab 	bl	800248c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002d36:	46c0      	nop			; (mov r8, r8)
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	b002      	add	sp, #8
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b082      	sub	sp, #8
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8002d46:	46c0      	nop			; (mov r8, r8)
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	b002      	add	sp, #8
 8002d4c:	bd80      	pop	{r7, pc}
	...

08002d50 <__libc_init_array>:
 8002d50:	b570      	push	{r4, r5, r6, lr}
 8002d52:	2600      	movs	r6, #0
 8002d54:	4d0c      	ldr	r5, [pc, #48]	; (8002d88 <__libc_init_array+0x38>)
 8002d56:	4c0d      	ldr	r4, [pc, #52]	; (8002d8c <__libc_init_array+0x3c>)
 8002d58:	1b64      	subs	r4, r4, r5
 8002d5a:	10a4      	asrs	r4, r4, #2
 8002d5c:	42a6      	cmp	r6, r4
 8002d5e:	d109      	bne.n	8002d74 <__libc_init_array+0x24>
 8002d60:	2600      	movs	r6, #0
 8002d62:	f000 f821 	bl	8002da8 <_init>
 8002d66:	4d0a      	ldr	r5, [pc, #40]	; (8002d90 <__libc_init_array+0x40>)
 8002d68:	4c0a      	ldr	r4, [pc, #40]	; (8002d94 <__libc_init_array+0x44>)
 8002d6a:	1b64      	subs	r4, r4, r5
 8002d6c:	10a4      	asrs	r4, r4, #2
 8002d6e:	42a6      	cmp	r6, r4
 8002d70:	d105      	bne.n	8002d7e <__libc_init_array+0x2e>
 8002d72:	bd70      	pop	{r4, r5, r6, pc}
 8002d74:	00b3      	lsls	r3, r6, #2
 8002d76:	58eb      	ldr	r3, [r5, r3]
 8002d78:	4798      	blx	r3
 8002d7a:	3601      	adds	r6, #1
 8002d7c:	e7ee      	b.n	8002d5c <__libc_init_array+0xc>
 8002d7e:	00b3      	lsls	r3, r6, #2
 8002d80:	58eb      	ldr	r3, [r5, r3]
 8002d82:	4798      	blx	r3
 8002d84:	3601      	adds	r6, #1
 8002d86:	e7f2      	b.n	8002d6e <__libc_init_array+0x1e>
 8002d88:	08002e34 	.word	0x08002e34
 8002d8c:	08002e34 	.word	0x08002e34
 8002d90:	08002e34 	.word	0x08002e34
 8002d94:	08002e38 	.word	0x08002e38

08002d98 <memset>:
 8002d98:	0003      	movs	r3, r0
 8002d9a:	1882      	adds	r2, r0, r2
 8002d9c:	4293      	cmp	r3, r2
 8002d9e:	d100      	bne.n	8002da2 <memset+0xa>
 8002da0:	4770      	bx	lr
 8002da2:	7019      	strb	r1, [r3, #0]
 8002da4:	3301      	adds	r3, #1
 8002da6:	e7f9      	b.n	8002d9c <memset+0x4>

08002da8 <_init>:
 8002da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002daa:	46c0      	nop			; (mov r8, r8)
 8002dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dae:	bc08      	pop	{r3}
 8002db0:	469e      	mov	lr, r3
 8002db2:	4770      	bx	lr

08002db4 <_fini>:
 8002db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002db6:	46c0      	nop			; (mov r8, r8)
 8002db8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dba:	bc08      	pop	{r3}
 8002dbc:	469e      	mov	lr, r3
 8002dbe:	4770      	bx	lr
